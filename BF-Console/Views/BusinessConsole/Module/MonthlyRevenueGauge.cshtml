
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Newtonsoft.Json
@{
    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    MonthlyIndicator _model;
    _modelState = (ModelStateDictionary)ViewBag.ModelState;
    models = ((SampleController<UserProfile>)ViewContext.Controller).DataSource;
    _model = (MonthlyIndicator)this.Model;
}
@{
    String _viewID = $"revenue{DateTime.Now.Ticks}";
    MonthlyIndicatorQueryViewModel _viewModel = (MonthlyIndicatorQueryViewModel)ViewBag.ViewModel;
}
@{
    IQueryable<Payment> items = (IQueryable<Payment>)TempData["PaymentItems"];
    int revenueAmt = items.Sum(p => p.PayoffAmount) ?? 0;
    decimal indicatorAmt = 1, percentage = 100;
    if (_viewModel.BranchID.HasValue)
    {
        MonthlyBranchRevenueIndicator indicator =
            models.GetTable<MonthlyBranchRevenueIndicator>()
                .Where(m => m.BranchID == _viewModel.BranchID && m.PeriodID == _model.PeriodID
                    && m.MonthlyBranchRevenueGoal != null).First();

        //indicatorAmt = (decimal)indicator.RevenueGoal;
        TempData["RevenueGoal"] = indicator;

        indicator = models.GetTable<MonthlyBranchRevenueIndicator>()
                .Where(m => m.BranchID == _viewModel.BranchID && m.PeriodID == _model.PeriodID)
                .OrderBy(g => g.GradeID).First();
        indicatorAmt = indicator.RevenueGoal;
        percentage = indicator.MonthlyRevenueGrade.IndicatorPercentage;

    }
    else
    {
        MonthlyRevenueIndicator indicator =
            models.GetTable<MonthlyRevenueIndicator>()
                .Where(m => m.PeriodID == _model.PeriodID
                    && m.MonthlyRevenueGoal != null).First();
        //indicatorAmt = (decimal)(indicator.MonthlyRevenueGoal.CustomRevenueGoal ?? indicator.RevenueGoal);
        TempData["RevenueGoal"] = indicator;

        indicator =
            models.GetTable<MonthlyRevenueIndicator>()
                .Where(m => m.PeriodID == _model.PeriodID)
                .OrderBy(m => m.GradeID).First();
        indicatorAmt = indicator.RevenueGoal;
        percentage = indicator.MonthlyRevenueGrade.IndicatorPercentage;
    }
    decimal achievementRatio = revenueAmt * percentage / indicatorAmt;
}
    <h2 id="@($"{_viewID}_text")" class="m-b-0"></h2>
    <canvas id="@($"{_viewID}_gauge")" height="150"></canvas>
    <h4 class="col-pink">目標 $@($"{indicatorAmt / 10000M}")萬元</h4>
    <script>
    $(function () {
        var zoneGauge = new Gauge(document.getElementById("@($"{_viewID}_gauge")"));
            var opts = {
                angle: 0,
                lineWidth: 0.4,
                radiusScale: 1,
                pointer: {
                    length: 0.5,
                    strokeWidth: 0.05,
                    color: '#888'
                },
                staticLabels: {
                    font: "12px Material-Design-Iconic-Font",
                    color: "#888",
                    labels: [100, 110, 120, 130],
                    fractionDigits: 0
                },
                staticZones: [{
                        //                        strokeStyle: "#F15F79",
                        strokeStyle: "#DD2B35",
                        min: 0,
                        max: 100
                    },
                    {
                        //                        strokeStyle: "#FFC107",
                        strokeStyle: "#F18336",
                        min: 101,
                        max: 110
                    },
                    {
                        //                        strokeStyle: "#457fca",
                        strokeStyle: "#FED52B",
                        min: 111,
                        max: 120
                    },
                    {
                        //                        strokeStyle: "#78b83e",
                        strokeStyle: "#96C641",
                        min: 121,
                        max: 130
                    },
                    {
                        strokeStyle: "#3B9740",
                        min: 131,
                        max: 150
                    }
                ],
                limitMax: false,
                limitMin: false,
                highDpiSupport: true,
                generateGradient: true
            }
            zoneGauge.setOptions(opts);
            zoneGauge.setTextField(document.getElementById("@($"{_viewID}_text")"));
            zoneGauge.minValue = 0;
            zoneGauge.maxValue = 150;
            zoneGauge.set(@(Math.Round(achievementRatio)));
    });
    </script>

