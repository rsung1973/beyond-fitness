
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Newtonsoft.Json
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    List<CalendarEventItem> _model;
    List<CalendarEvent> _result;
    UserProfile _userProfile;

    FullCalendarViewModel _viewModel = (FullCalendarViewModel)ViewBag.ViewModel;

    _modelState = (ModelStateDictionary)ViewBag.ModelState;
    models = ((SampleController<UserProfile>)ViewContext.Controller).DataSource;
    _model = (List<CalendarEventItem>)this.Model;
    _userProfile = Context.GetUser();
    _result = new List<CalendarEvent>();

    foreach (var item in _model)
    {
        if (item.EventItem is LessonTime)
        {
            var g = (LessonTime)item.EventItem;
            _result.Add(new CalendarEvent
            {
                id = g.LessonID.ToString(),
                keyID = g.LessonID.EncryptKey(),
                learnerID = g.GroupingLesson.RegisterLesson.Any(r=>r.UID==_viewModel.LearnerID) ? _viewModel.LearnerID : g.RegisterLesson.UID,
                title = String.Concat(g.LessonTypeStatus(),
                        (g.PreferredLessonTime != null && !g.PreferredLessonTime.ApprovalDate.HasValue ? "(待審核)" : "")),
                start = String.Format("{0:O}", g.ClassTime),
                end = String.Format("{0:O}", g.ClassTime.Value.AddMinutes(g.DurationInMinutes.Value)),
                description = String.Join("、",g.GroupingLesson.RegisterLesson.Select(r=>r.UserProfile.RealName)),
                allDay = false,
                className = g.PreferredLessonTime != null && !g.PreferredLessonTime.ApprovalDate.HasValue
                ? new String[] { "b-l b-2x b-approve" }
                : g.LessonAttendance != null
                    ? new String[] { "b-l b-2x b-finish" }
                    : g.IsPTSession() || g.RegisterLesson.LessonPriceType.IsWelfareGiftLesson != null
                        ? new string[] { "b-l b-2x b-PT" }
                        : g.IsPISession()
                            ? new string[] { "b-l b-2x b-PI" }
                            : g.IsTrialLesson()
                                ? new string[] { "b-l b-2x b-PE" }
                                : g.RegisterLesson.LessonPriceType.Status == (int)Naming.DocumentLevelDefinition.教練PI
                                    ? new String[] { "b-l b-2x b-CoachPI" }
                                        : g.IsSTSession()
                                            ? new string[] { "b-l b-2x b-ST" }
                                            : null,
                editable = g.LessonAttendance == null,
                icon = g.LessonAttendance != null
                        ? g.LessonPlan.CommitAttendance.HasValue
                            ? "zmdi zmdi-check-all"
                            : "zmdi zmdi-check"
                        : g.LessonPlan.CommitAttendance.HasValue
                            ? "zmdi zmdi-check"
                            : null,
            });
        }
        else if (item.EventItem is UserEvent)
        {
            var g = (UserEvent)item.EventItem;
            _result.Add(new CalendarEvent
            {
                id = "my" + g.EventID,
                title = g.Title ?? g.ActivityProgram,
                start = String.Format("{0:O}", g.StartDate),
                end = String.Format("{0:O}", g.EndDate),
                description = g.Title == null ? "" : g.ActivityProgram,
                keyID = g.EventID.EncryptKey(),
                allDay = false,
                editable = false,
                className = new string[] { "b-l b-2x b-custom" },  //g.StartDate < today ? g.EndDate < today ? new string[] { "event", "bg-color-red" } : new string[] { "event", "bg-color-blue" } : new string[] { "event", "bg-color-pink" },
                icon = ""   //"fa-magic"
            });
        }

    }


}
@Html.Raw(JsonConvert.SerializeObject(_result))
