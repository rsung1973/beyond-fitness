@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    LessonTime _model;

    _modelState = (ModelStateDictionary)ViewBag.ModelState;
    models = ((SampleController<UserProfile>)ViewContext.Controller).DataSource;
    _model = (LessonTime)this.Model;
    String _viewID = $"plan{DateTime.Now.Ticks}";
}
@{
    UserProfile learner = (UserProfile)ViewBag.Learner;
    var plan = _model.AssertTrainingPlan(models, UID: learner.UID);
    var execution = plan.TrainingExecution;
}
<div id="@(_viewID)">
    @{
        ViewBag.ViewID = _viewID;
        Html.RenderPartial("~/Views/LearnerProfile/Module/LessonTrainingExecution.cshtml", _model);
    }
</div>

@if ((bool?)ViewBag.ViewOnly != true)
{
    <script>

        function refreshTrainingExecution(stageID) {
            showLoading();
            $.post('@Html.Raw(Url.Action("LoadTrainingExecution", "LearnerProfile", new { KeyID = _model.LessonID.EncryptKey() }))', { 'learnerID': @(learner.UID), 'stageID': stageID }, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    alert(data.message);
                } else {
                    $('#@(_viewID)').empty()
                        .append(data);
                    $('#@(_viewID) .livicon-evo').addLiviconEvo();
                }
            });
        }

        function editStageTrainingItem(stageID, itemID, $stage) {
            showLoading();
            $global.$stage = $stage;
            $.post('@Html.Raw(Url.Action("EditTrainingItem", "LearnerProfile", new { execution.ExecutionID }))', { 'stageID': stageID, 'itemID': itemID, 'itemMode': itemID != undefined ? @((int)Naming.TrainingItemMode.ForTrainingItem) : null }, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    alert(data.message);
                } else {
                    $(data).appendTo($('body'));
                }
            });
        }

        function editStageBreakInterval(stageID, itemID, $stage) {
            showLoading();
            $global.$stage = $stage;
            $.post('@Html.Raw(Url.Action("EditBreakInterval", "LearnerProfile", new { execution.ExecutionID }))', { 'stageID': stageID, 'itemID': itemID, 'itemMode': @((int)Naming.TrainingItemMode.ForBreakInterval) }, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    alert(data.message);
                } else {
                    $(data).appendTo($('body'));
                }
            });
        }

        function scrollToStage($stage) {
            $([document.documentElement, document.body]).scrollTop($stage.offset().top);
        }

    </script>
}
else
{
    <script>

        $(function () {
            if (!window.editStageTrainingItem) {
                window.editStageTrainingItem = function (stageID, itemID) {
                    swal("是不是忘了重新了解學生？", "了解學生後編輯的課表才會更完美喔！");
                };
            }
            if (!window.editStageBreakInterval) {
                window.editStageBreakInterval = function (stageID, itemID) {
                    swal("是不是忘了重新了解學生？", "了解學生後編輯的課表才會更完美喔！");
                };
            }
        });

    </script>
}