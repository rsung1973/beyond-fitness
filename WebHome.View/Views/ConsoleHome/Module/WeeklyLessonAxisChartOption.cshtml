@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using Newtonsoft.Json
@{
    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _model;
    string _chartID = ViewBag.ChartID = "lessonsAxisChart";
    IEnumerable<int> _hourIdx;
    LessonTimeBookingViewModel _viewModel;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _model = (UserProfile)this.Model;
    _hourIdx = Enumerable.Range(7, 16);
    var _dateIdx = Enumerable.Range(0, 7);
    _viewModel = (LessonTimeBookingViewModel)ViewBag.ViewModel;
}

@{
    DateTime start = _viewModel.ClassTimeStart.Value.FirstDayOfWeek();
    var items = models.GetTable<LessonTime>().Where(l => l.ClassTime >= start && l.ClassTime < start.AddDays(7));
    if (_viewModel.BranchID.HasValue)
    {
        items = items.Where(l => l.BranchID == _viewModel.BranchID);
    }
    else
    {
        items = items.Where(l => l.BranchID.HasValue);
    }

    var dataItems = items.ToList()
        .GroupBy(l => new { DateIdx = (l.ClassTime.Value.Date - start).Days, Hour = l.ClassTime.Value.Hour });

    var result = _dateIdx.SelectMany(d => 
        _hourIdx.Select(h => new int[] 
                { 
                    d, 
                    h,  
                    dataItems.Where(g => g.Key.DateIdx == d && g.Key.Hour == h)
                        .FirstOrDefault()?.PTLesson().Count() ?? 0,
                    dataItems.Where(g => g.Key.DateIdx == d && g.Key.Hour == h)
                        .FirstOrDefault()?.Where(l => l.TrainingBySelf == 1).Count() ?? 0,
                    dataItems.Where(g => g.Key.DateIdx == d && g.Key.Hour == h)
                        .FirstOrDefault()?.TrialLesson().Count() ?? 0,
                    
                })).ToArray();

}
<script>
    if ($global.echarts.hours === undefined) {
        $global.echarts.hours = [];
    }
    if ($global.echarts.days === undefined) {
        $global.echarts.days = [];
    }
    if ($global.echarts.data === undefined) {
        $global.echarts.data = [];
    }
    $global.echarts.hours['@(_chartID)'] = @Html.Raw(_hourIdx.Select(h=>$"{h:00}").JsonStringify());
    // prettier-ignore
    $global.echarts.days['@(_chartID)'] = @Html.Raw(_dateIdx.Select(d=>$"{start.AddDays(d):yyyy/MM/dd}").JsonStringify());
    // prettier-ignore
    $global.echarts.data['@(_chartID)'] = @Html.Raw(result.JsonStringify());
    $global.echarts.title = [];
    $global.echarts.singleAxis = [];
    $global.echarts.series = [];
    $global.echarts.days['@(_chartID)'].forEach(function(day, idx) {
        $global.echarts.title.push({
            textBaseline: "middle",
            top: ((idx + 0.5) * 100) / 7 + "%",
            text: day,
            textStyle: {
                fontSize: 12,
            },
        });
        $global.echarts.singleAxis.push({
            left: 100,
            type: "category",
            boundaryGap: false,
            data: $global.echarts.hours['@(_chartID)'],
            top: (idx * 100) / 7 + 5 + "%",
            height: 100 / 7 - 10 + "%",
            axisLabel: {
                interval: 0,
                //rotate: 45
            },
        });
        $global.echarts.series.push({
            singleAxisIndex: idx,
            coordinateSystem: "singleAxis",
            type: "scatter",
            symbol: "path://M51.911,16.242C51.152,7.888,45.239,1.827,37.839,1.827c-4.93,0-9.444,2.653-11.984,6.905 c-2.517-4.307-6.846-6.906-11.697-6.906c-7.399,0-13.313,6.061-14.071,14.415c-0.06,0.369-0.306,2.311,0.442,5.478 c1.078,4.568,3.568,8.723,7.199,12.013l18.115,16.439l18.426-16.438c3.631-3.291,6.121-7.445,7.199-12.014 C52.216,18.553,51.97,16.611,51.911,16.242z",
            label: {
                normal: {
                    show: true,
                    position: "inside",
                    textStyle: {
                        fontSize: 13,
                        fontWeight: 800
                    },
                    formatter: function(params) {
                        var result = params.value[1] + params.value[2] + params.value[3];
                        if (result > 0) {
                            return result;
                        } else {
                            return "";
                        }
                    },
                },
            },           
            data: [],
            symbolSize: function(dataItem) {
                return (dataItem[1] + dataItem[2] + dataItem[3]) * @(_viewModel.BranchID.HasValue ? 6 : 2);
            },
        });
    });
    $global.echarts.data['@(_chartID)'].forEach(function(dataItem) {
        $global.echarts.series[dataItem[0]].data.push([dataItem[1]-7, dataItem[2], dataItem[3], dataItem[4]]);
    });

    $global.echarts.option['@(_chartID)'] = {
        tooltip: {
            position: "top",
            formatter: function (params,tickets) {
                var str = "";
                  @* if (params.value[1] > 0) {
                      str = str + ' P.T:' + params.value[1] +'<br/>'; 
                  } 
                  if (params.value[2] > 0) {
                      str = str + ' P.I:' + params.value[2] +'<br/>';
                  } 
                  if (params.value[3] > 0) {
                      str = str + ' T.S:' + params.value[3];
                  }  *@

                  str = ' P.T:' + params.value[1] +'<br/>' + ' P.I:' + params.value[2] +'<br/>' + ' T.S:' + params.value[3] ; 
                return str;
            }
        },
        title: $global.echarts.title,
        singleAxis: $global.echarts.singleAxis,
        series: $global.echarts.series,
    };

</script>


