@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using CommonLib.Utility 
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using Newtonsoft.Json
@{
    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _model;
    string _chartID = ViewBag.ChartID = "lessonsHeatmap";
    IEnumerable<int> _hourIdx;
    LessonTimeBookingViewModel _viewModel;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _model = (UserProfile)this.Model;
    _hourIdx = Enumerable.Range(7, 16);
    _viewModel = (LessonTimeBookingViewModel)ViewBag.ViewModel;
}

@{
    DateTime start = _viewModel.ClassTimeStart.Value.FirstDayOfMonth();
    var items = models.GetTable<LessonTime>()
                        .Where(l => l.ClassTime >= start && l.ClassTime < start.AddMonths(1));
    if (_viewModel.BranchID.HasValue)
    {
        items = items.Where(l => l.BranchID == _viewModel.BranchID);
    }
    else
    {
        items = items.Where(l => l.BranchID.HasValue);
    }

    var dataItems = items.ToList()
        .GroupBy(l => l.ClassTime.Value.ToString("yyyy-MM-dd"))
        .Select(g => new Object[] { g.Key, g.Count() })
        .ToArray();
}
<script>
    $global.echarts.option['@(_chartID)'] = {
          tooltip: {
            position: "top",
          },
          visualMap: [
            {
              min: 0,
              max: @(_viewModel.BranchID.HasValue ? 30 : 200),
              calculable: true,
              seriesIndex: [0],
              orient: "horizontal",
              right: 0,
              bottom: 20,
            },
          ],
          calendar: [
            {
              orient: "vertical",
              yearLabel: {
                show: true,
                margin: 40
              },
              monthLabel: {
                show: true,
                align: 'right',
                margin: 20,
                position: 'end'
              },
              dayLabel: {
                firstDay: 1,
              },
              cellSize: 45,
              left: 20,
              range: "@($"{start:yyyy-MM}")",
            },
          ],
          series: [
            {
              type: "effectScatter",
              coordinateSystem: "calendar",
              calendarIndex: 0,
              label: {
                    show: true,
              },              
              symbolSize: function (val) {
                return val[1] / @(_viewModel.BranchID.HasValue ? 4 : 8);
              },
              data: @Html.Raw(dataItems.JsonStringify()),
            },
          ],
    };

</script>


