
@using System.IO
@using System.Linq.Expressions
@using System.Web
@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using WebHome.Helper.BusinessOperation
@using Newtonsoft.Json
@{
    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    MonthlyIndicator _model;
    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _model = (MonthlyIndicator)this.Model;
}
@{
    MonthlyIndicatorQueryViewModel _viewModel = (MonthlyIndicatorQueryViewModel)ViewBag.ViewModel;

    int? totalAchievementAmt = null;
    int? totalAchievementAmtLastMonth = null;

    if(_viewModel.BranchID.HasValue)
    {
        MonthlyBranchRevenueGoal item = _model.MonthlyBranchRevenueIndicator.Where(r => r.BranchID == _viewModel.BranchID)
                .Where(r => r.MonthlyBranchRevenueGoal != null)
                .Select(r => r.MonthlyBranchRevenueGoal).FirstOrDefault();
        totalAchievementAmt = (item?.ActualLessonAchievement ?? 0) 
                                + (item?.ActualSharedAchievement ?? 0)
                                + (item?.ATAchievement ?? 0)
                                + (item?.SRAchievement ?? 0)
                                + (item?.SDAchievement ?? 0)
                                - (item?.VoidShare ?? 0);

        TempData["RevenueGoal"] = item;

        MonthlyBranchRevenueGoal lastMonth = models.GetTable<MonthlyIndicator>().Where(i => i.StartDate == _model.StartDate.AddMonths(-1))
                        .Join(models.GetTable<MonthlyBranchRevenueIndicator>().Where(r => r.BranchID != _viewModel.BranchID)
                            .Where(r => r.MonthlyBranchRevenueGoal != null), i => i.PeriodID, r => r.PeriodID, (i, r) => r)
                        .Select(r => r.MonthlyBranchRevenueGoal)
                        .FirstOrDefault();
        totalAchievementAmtLastMonth = (lastMonth?.ActualLessonAchievement ?? 0)
                                        + (lastMonth?.ActualSharedAchievement ?? 0)
                                        + (lastMonth?.ATAchievement ?? 0)
                                        + (lastMonth?.SRAchievement ?? 0)
                                        + (lastMonth?.SDAchievement ?? 0)
                                        - (lastMonth?.VoidShare ?? 0);

    }
    else
    {
        MonthlyRevenueGoal item = _model.MonthlyRevenueIndicator.Where(r => r.MonthlyRevenueGoal != null)
                .Select(r => r.MonthlyRevenueGoal).FirstOrDefault();
        totalAchievementAmt = (item?.ActualLessonAchievement ?? 0) 
                                + (item?.ActualSharedAchievement ?? 0)
                                + (item?.ATAchievement ?? 0)
                                + (item?.SRAchievement ?? 0)
                                + (item?.SDAchievement ?? 0)
                                - (item?.VoidShare ?? 0);

        TempData["RevenueGoal"] = item;

        MonthlyRevenueGoal lastMonth = models.GetTable<MonthlyIndicator>().Where(i => i.StartDate == _model.StartDate.AddMonths(-1))
                        .Join(models.GetTable<MonthlyRevenueIndicator>()
                            .Where(r => r.MonthlyRevenueGoal != null), i => i.PeriodID, r => r.PeriodID, (i, r) => r)
                        .Select(r => r.MonthlyRevenueGoal)
                        .FirstOrDefault();
        totalAchievementAmtLastMonth = (lastMonth?.ActualLessonAchievement ?? 0)
                                        + (lastMonth?.ActualSharedAchievement ?? 0)
                                        + (lastMonth?.ATAchievement ?? 0)
                                        + (lastMonth?.SRAchievement ?? 0)
                                        + (lastMonth?.SDAchievement ?? 0)
                                        - (lastMonth?.VoidShare ?? 0);
    }

    if (TempData["RevenueGoal"] == null)
    {
        Context.Response.Redirect("~/Error/Goback?message=" + HttpUtility.UrlEncode("資料未設定!!"));
    }

}
<h2>
    @($"{totalAchievementAmt:##,###,###,###}")
@*    @if (totalAchievementAmt >= totalAchievementAmtLastMonth)
    {
        <i class="zmdi zmdi-trending-up"></i>
    }
    else
    {
        <i class="zmdi zmdi-trending-down"></i>
    }
*@
</h2>

