
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _model;
    CalendarEventViewModel _viewModel;
    String _dialogID = $"booking{DateTime.Now.Ticks}";
    UserProfile _profile;

    BookingLessonPageModel _pageModel = new BookingLessonPageModel { };
    ViewBag.PageModel = _pageModel;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _model = (UserProfile)this.Model;
    _viewModel = (CalendarEventViewModel)ViewBag.ViewModel;
    _profile = await Context.GetUserAsync();

}
<div class="modal fade" id="@(_dialogID)" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="title">預約 <span class="col-red">@(_model.FullName())</span> session</h2>
                <a class="closebutton" data-dismiss="modal"></a>
            </div>
            <div class="modal-body">
                <div class="row clearfix">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-12 single">
                        <div class="input-group">
                            <input type="text" class="form-control datetime" data-date-format="yyyy/mm/dd hh:ii" readonly="readonly" placeholder="開始時間" name="ClassDate" value="@($"{_viewModel.StartDate:yyyy/MM/dd HH:mm}")" />
                            <span class="input-group-addon xl-slategray">
                                <i class="zmdi zmdi-time"></i>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-12" id="fieldBranch">
                        <select class="form-control show-tick" name="BranchID">
                            <option value="">-- 請選擇地點 --</option>
                            @{
                                ViewBag.DataItems = models.PromptAvailableStore();
                                int prefered = models.GetTable<CoachWorkplace>().Where(c => c.CoachID == _profile.UID).Select(c => (int?)c.BranchID).FirstOrDefault() ?? -1;
                                await Html.RenderPartialAsync("~/Views/SystemInfo/BranchStoreOptions.cshtml", model: prefered);
                            }
                        </select>
                    </div>
                </div>
                <div class="row clearfix">
                    <div class="col-12">
                        <span>遠距教學請在下方入Zoom會議室連結</span>
                        <div class="form-line">
                            <textarea rows="1" class="form-control no-resize" placeholde="Zoom會議室連結" maxlength="2048" name="Place"></textarea>
                        </div>
                        <span>例：https://zoom.us/j/92400075019?pwd=dWJidHNwbU05QlVmTGh0a2hyOEs0dz09 </span>
                        <script>
                            $(function () {
                                $('#@(_dialogID) textarea[name="Place"]').on('change', function (element) {
                                    var $element = $(this);
                                    var start = $element.val().indexOf('https');
                                    if (start >= 0) {
                                        var end = $element.val().indexOf('\n', start);
                                        if (end > start) {
                                            $element.val($element.val().substring(start, end));
                                        }
                                    }
                                });
                            });
                        </script>
                    </div>
                </div>
                <div class="row clearfix">
                    <div class="col-12">
                        <div class="card square inbox">
                            <div class="cover">
                                <ul class="mail_list list-group list-unstyled">
                                    <li class="list-group-item">
                                        <div class="media">
                                            <div class="pull-left">
                                                <div class="thumb hidden-sm-down m-r-20">
                                                    @{
                                                        ViewBag.ProfileClass = "rounded-circle popfit";
                                                        await Html.RenderPartialAsync("~/Views/Common/ProfileImage.cshtml", _model);
                                                    }
                                                </div>
                                            </div>
                                            <div class="media-body">
                                                <div class="media-heading">
                                                    <a class="m-r-10">搜尋結果如下：</a>
                                                </div>
                                                @{
                                                    _pageModel.HasChoice = false;
                                                }
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                                <ul class="mail_list list-group list-unstyled">
                                    @{
                                        var attendedCheck = models.GetTable<LessonTime>()
                                                .Join(models.GetTable<GroupingLesson>()
                                                    .Join(models.GetTable<RegisterLesson>()
                                                            .Where(r => r.UID == _model.UID),
                                                        g => g.GroupID, r => r.RegisterGroupID, (g, r) => g)
                                                    , l => l.GroupID, g => g.GroupID, (l, g) => l);
                                    }
                                    @if (!attendedCheck.Any() || _model.UserProfileExtension.CurrentTrial.HasValue)
                                    {
                                        await Html.RenderPartialAsync("~/Views/ConsoleEvent/EventModal/BookingTrialLesson.cshtml", _model);
                                    }
                                    @{
                                        await Html.RenderPartialAsync("~/Views/ConsoleEvent/EventModal/BookingRemoteTrialLesson.cshtml", _model);
                                    }
                                    @if (!_model.UserProfileExtension.CurrentTrial.HasValue)
                                    {
                                        await Html.RenderPartialAsync("~/Views/ConsoleEvent/EventModal/BookingLearnerLesson.cshtml", _model);
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>                
                @if (_pageModel.HasChoice)
                {
                    <div class="modal-footer">
                        <button type="button" class="btn btn-darkteal btn-round waves-effect" onclick="javascript:if(booking) booking();">確定, 不後悔</button>
                    </div>
                }
            </div>
        </div>
    </div>

    @{ await Html.RenderPartialAsync("~/Views/ConsoleHome/Shared/BSModalScript.cshtml", model: _dialogID);}

<script>

        var booking;
        function selectBooking(element, lessonType, priceID) {
            var $element = $(element);
            $('input:checkbox').prop('checked', false);
            $element.prop('checked', true);
            if ($element.is('[data-location]')) {
                var $branch = $('#@(_dialogID) select[name="BranchID"]');
                $branch.find($element.attr('data-location')).prop('selected', true);
                $branch.selectpicker('refresh');
            }
            booking = function () {
                commitBooking(lessonType, priceID);
            }
        }

        function commitBooking(lessonType, priceID) {

            var $formData = $('#@(_dialogID) input,select,textarea').serializeObject();
            $formData.coachID = @(_profile.UID);
            $formData.UID = @(_model.UID);
            $formData.sessionStatus = lessonType;
            $formData.priceID = priceID;

            clearErrors();
            switch (lessonType) {

                case '@((int)Naming.LessonPriceStatus.一般課程)':
                case '@((int)Naming.LessonPriceStatus.點數兌換課程)':
                case '@((int)Naming.LessonPriceStatus.企業合作方案)':
                default:
                    $.post('@Html.Raw(Url.Action("CommitBookingByCoach","Lessons"))', $formData, function (data) {
                        if ($.isPlainObject(data)) {
                            if (data.result) {
                                $global.closeAllModal();
                                if (typeof (refreshEvents) == 'function') {
                                    refreshEvents();
                                }
                                if (typeof (refetchCalendarEvents) == 'function') {
                                    refetchCalendarEvents();
                                }
                                Swal.fire(
                                    '幹得好!',
                                    data.message,
                                    'success'
                                );
                            } else {
                                Swal.fire(
                                    'Oops...',
                                    data.message,
                                    'warning'
                                );
                            }
                        } else {
                            $(data).appendTo('body').remove();
                        }
                    });
                    break;

                case '@((int)Naming.LessonPriceStatus.自主訓練)':
                    $formData.trainingBySelf = @((int)LessonTime.SelfTrainingDefinition.自主訓練);
                    $.post('@Html.Raw(Url.Action("CommitBookingByCoach","Lessons"))', $formData, function (data) {
                        if ($.isPlainObject(data)) {
                            if (data.result) {
                                $global.closeAllModal();
                                if (typeof (refreshEvents) == 'function') {
                                    refreshEvents();
                                }
                                if (typeof (refetchCalendarEvents) == 'function') {
                                    refetchCalendarEvents();
                                }
                                Swal.fire(
                                    '幹得好!',
                                    data.message,
                                    'success'
                                );
                            } else {
                                Swal.fire(
                                    'Oops...',
                                    data.message,
                                    'warning'
                                );
                            }
                        } else {
                            $(data).appendTo('body').remove();
                        }
                    });
                    break;
                case '@((int)Naming.LessonPriceStatus.在家訓練)':
                    $formData.trainingBySelf = @((int)LessonTime.SelfTrainingDefinition.在家訓練);
                    $.post('@Html.Raw(Url.Action("CommitBookingByCoach","Lessons"))', $formData, function (data) {
                        if ($.isPlainObject(data)) {
                            if (data.result) {
                                $global.closeAllModal();
                                if (typeof (refreshEvents) == 'function') {
                                    refreshEvents();
                                }
                                if (typeof (refetchCalendarEvents) == 'function') {
                                    refetchCalendarEvents();
                                }
                                Swal.fire(
                                    '幹得好!',
                                    data.message,
                                    'success'
                                );
                            } else {
                                Swal.fire(
                                    'Oops...',
                                    data.message,
                                    'warning'
                                );
                            }
                        } else {
                            $(data).appendTo('body').remove();
                        }
                    });
                    break;

                case '@((int)Naming.LessonPriceStatus.體驗課程)':
                    $formData.trainingBySelf = @((int)LessonTime.SelfTrainingDefinition.體驗課程);
                    $.post('@Html.Raw(Url.Action("CommitTrialLesson","CoachFacet",new { CoachID = _model.UID }))', $formData, function (data) {
                        if ($.isPlainObject(data)) {
                            if (data.result) {
                                $global.closeAllModal();
                                if (typeof (refreshEvents) == 'function') {
                                    refreshEvents();
                                }
                                if (typeof (refetchCalendarEvents) == 'function') {
                                    refetchCalendarEvents();
                                }
                                Swal.fire(
                                    '幹得好!',
                                    data.message,
                                    'success'
                                );
                            } else {
                                Swal.fire(
                                    'Oops...',
                                    data.message,
                                    'warning'
                                );
                            }
                        } else {
                            $(data).appendTo('body').remove();
                        }
                    });
                    break;
            }
        }

        $(function () {
            equipDatetimePicker();

            $('#@(_dialogID) input:checkbox').on('click', function (event) {
                var event = event || window.event;
                var $target = $(event.target);
                if ($target.attr('id') == 'STLesson') {
                    $('#fieldBranch').css('display', 'none');
                } else {
                    $('#fieldBranch').css('display', 'block');
                }
            });

        });
</script>
</div>
