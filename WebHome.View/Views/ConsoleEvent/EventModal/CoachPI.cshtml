
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    LessonTime _model;
    CalendarEventQueryViewModel _viewModel;
    String _dialogID = $"other{DateTime.Now.Ticks}";
    TrainingPlan plan;
    RegisterLesson _proposedLesson;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _model = (LessonTime)this.Model;
    _viewModel = (CalendarEventQueryViewModel)ViewBag.ViewModel;
    plan = _model.AssertTrainingPlan(models);
    _proposedLesson = _model.GroupingLesson.RegisterLesson.Where(r => r.MasterRegistration == true).FirstOrDefault();
    if (_proposedLesson == null)
    {
        _proposedLesson = _model.RegisterLesson;
    }
}
<div class="modal fade" id="@(_dialogID)" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="member-card">
                <a class="closebutton" data-dismiss="modal"></a>
                <div class="header g-bg-darkteal">
                    <h4 class="m-t-0 p-t-10">@(_proposedLesson.UserProfile.FullName())</h4>
                </div>
                <div class="member-img">
                    <a href="javascript:$('').launchDownload('@Html.Raw(Url.Action("LearnerProfile","ConsoleHome"))', { 'keyID': '@Html.Raw(_model.RegisterLesson.UID.EncryptKey())' });">
                        @{
                            ViewBag.ProfileClass = "rounded-circle popfit";
                            await Html.RenderPartialAsync("~/Views/Common/ProfileImage.cshtml", _proposedLesson.UserProfile);
                        }
                    </a>
                </div>
                <div class="body">
                    <div class="col-12">
                        <p class="text-muted">@(_model.FullLessonDuration())</p>
                        <address>@(_model.LessonTypeStatus()) <i class="zmdi zmdi-pin"></i>@(_model.BranchID.HasValue ? _model.BranchStore.BranchName : _model.Place)</address>
                        @if (_model.GroupingLesson.RegisterLesson.Count > 1)
                        {
                            <ul class="list-unstyled team-info margin-0">
                                @foreach (var r in _model.GroupingLesson.RegisterLesson)
                                {
                                <li>
                                    @{
                                        ViewBag.ProfileClass = "popfit";
                                        await Html.RenderPartialAsync("~/Views/Common/ProfileImage.cshtml", r.UserProfile);
                                    }
                                </li>
                                }
                            </ul>
                        }
                    </div>
                    <hr>
                    @*@{ await Html.RenderPartialAsync("~/Views/ConsoleEvent/Module/LessonEmphasis.cshtml", _model);}
                    *@
                    <div class="col-12 align-left">
                        <p class="col-red">課表重點：@((_model.TrainingPlan.FirstOrDefault()?.TrainingExecution.Emphasis) ?? "Unfinished")</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-darkteal btn-round waves-effect" onclick="javascript:$('').launchDownload('@Html.Raw(Url.Action("LessonTrainingContent", "ConsoleHome",new { LearnerID = _model.RegisterLesson.UID }))', {'keyID': '@Html.Raw(_model.LessonID.EncryptKey())' });"><i class="zmdi zmdi-edit"></i></button>
                @*<button type="button" class="btn btn-darkteal btn-round waves-effect" onclick="javascript:$('').launchDownload('@Html.Raw(Url.Action("LearnerProfile","ConsoleHome"))', { 'keyID': '@Html.Raw(_model.RegisterLesson.UID.EncryptKey())' });"><i class="zmdi zmdi-edit"></i></button>*@
                @*<button type="button" class="btn btn-simple btn-round waves-effect" onclick="commitEmphasis('@Html.Raw(plan.ExecutionID.EncryptKey())');">更新重點</button>*@
                @if (_model.RegisterLesson.MasterRegistration == true)
                {
                    <button type="button" class="btn btn-simple btn-round waves-effect" onclick="bookingCoachPI();">修改成員</button>
                }
                @{ await Html.RenderPartialAsync("~/Views/ConsoleEvent/Module/RevokeLesson.cshtml", _model);}

            </div>
        </div>
    </div>
    @{ await Html.RenderPartialAsync("~/Views/ConsoleHome/Shared/BSModalScript.cshtml", model: _dialogID);}

    <script>
        function bookingCoachPI() {
            showLoading();
            $.post('@Html.Raw(Url.Action("BookingCoachPI", "ConsoleEvent", new { keyID = _model.LessonID.EncryptKey(),CoachID = _model.AttendingCoach }))', {}, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    Swal.fire(
                        'Oops...',
                        data.message,
                        'warning'
                    )
                } else {
                    $(data).appendTo($('body'));
                }
            });
        }
        //
    </script>
</div>
