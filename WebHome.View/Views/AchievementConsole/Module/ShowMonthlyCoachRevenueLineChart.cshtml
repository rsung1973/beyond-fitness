

@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using CommonLib.Utility
@functions
{

    IQueryable<MonthlyCoachRevenueIndicator> _model;
    MonthlyCoachRevenueIndicator[] items;

    int[] BuildData(Naming.SessionTypeDefinition sessionType)
    {

        switch (sessionType)
        {
            case Naming.SessionTypeDefinition.PT:
                return items.Select(m => m.ActualCompleteLessonCount ?? 0).ToArray();
            case Naming.SessionTypeDefinition.PI:
                return items.Select(m => m.ActualCompletePICount ?? 0).ToArray();
            case Naming.SessionTypeDefinition.ST:
                return items.Select(m => m.STCount ?? 0).ToArray();
            case Naming.SessionTypeDefinition.TS:
                return items.Select(m => m.ActualCompleteTSCount ?? 0).ToArray();
        }
        return new int[] { };
    }
}
@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;
    MonthlyCoachRevenueIndicatorQueryViewModel _viewModel;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _modelState = ViewContext.ModelState;
    _model = (IQueryable<MonthlyCoachRevenueIndicator>)this.Model;

    _viewModel = (MonthlyCoachRevenueIndicatorQueryViewModel)ViewBag.ViewModel;


    items = _model.ToArray();
}

<script>

    //指定圖表的配置項和資料
    $global.echarts.option = {
        tooltip: {
            trigger: 'axis'
        },
        legend: {
            data: @Html.Raw(_viewModel.SessionType.Select(t=> MonthlyCoachRevenueIndicatorQueryViewModel.__SessionName[(int)t]).JsonStringify()),
        },
        toolbox: {
            feature: {
                saveAsImage: {}
            }
        },
        xAxis: {
            type: 'category',
            boundaryGap: false,
            data: @Html.Raw(items.Select(c => $"{c.MonthlyIndicator.StartDate:yyyyMM}").ToArray().JsonStringify()),
        },
        yAxis: {
            type: 'value',
            axisLine: {
                show: false
            },
            axisTick: {
                show: false
            },
            // min:0,
            // max: 200,
            // minInterval: 50, //这个可自己设置刻度间隔
            //splitNumber: 5,
            //axisLabel: {
            // formatter:function(v){
            //     let item = '';
            //     if(v===0) {
            //         item='0'
            //     } else if(v==50){
            //         item = '10'
            //     } else if(v==100){
            //         item = '50'
            //     } else if(v==150){
            //         item = '100'
            //     } else if(v==200){
            //         item = '150'
            //     }

            //     return item
            // }
            //}
        },
        series: @Html.Raw(_viewModel.SessionType.Select(t=>new
            {
                name = MonthlyCoachRevenueIndicatorQueryViewModel.__SessionName[(int)t],
                type =  "line",
                symbol = "triangle",
                symbolSize =  10,
                //stack: 'Total',
                // label: {
                //     normal: {
                //         formatter: function (v) {
                //            return ptDT[v.dataIndex];
                //         }
                //     },
                //     formatter: function (v) {
                //         return ptDT[v.dataIndex];
                //     }
                // },
                data = BuildData(t),
            }).JsonStringify()),
    };

</script>