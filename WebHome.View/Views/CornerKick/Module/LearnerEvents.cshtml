@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Models.Timeline
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Newtonsoft.Json
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _model;
    DateTime? startDate, endDate;


    _modelState = (ModelStateDictionary)ViewBag.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];
    _model = (UserProfile)this.Model;
    startDate = ViewBag.StartDate ?? new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    endDate = startDate.Value.AddMonths(1);

}
@{
    var items = models.GetTable<RegisterLesson>().Where(r => r.UID == _model.UID)
                     .TotalLessons(models)
                     .Where(l => l.ClassTime >= startDate && l.ClassTime < endDate);
}
@foreach (var item in items)
{
    if (item.RegisterLesson.LessonPriceType.Status == (int)Naming.LessonPriceStatus.運動恢復課程)
    {
        <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【S.R】" data-event-id="@(item.LessonID)" data-link="#"></div>
    }
    else if (item.RegisterLesson.LessonPriceType.Status == (int)Naming.LessonPriceStatus.運動防護課程)
    {
        <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【A.T】" data-event-id="@(item.LessonID)" data-link="#"></div>
    }
    else if (item.RegisterLesson.LessonPriceType.Status == (int)Naming.LessonPriceStatus.營養課程)
    {
        <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【S.D】" data-event-id="@(item.LessonID)" data-link="#"></div>
    }
    else if (item.IsPTSession())
    {
        if (item.RegisterLesson.LessonPriceType.Status == (int)Naming.LessonPriceStatus.點數兌換課程
            && item.RegisterLesson.LessonPriceType.LessonPriceProperty.Any(p => p.PropertyID == (int)Naming.LessonPriceFeature.運動恢復課程))
        {
            <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【S.R 點數兌換】" data-event-id="@(item.LessonID)" data-link="#"></div>
        }
        else
        {
            <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【P.T】" data-event-id="@(item.LessonID)" data-link="#"></div>
        }
    }
    else if (item.IsPISession())
    {
        <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【P.I】" data-event-id="@(item.LessonID)" data-link="#"></div>
    }
    else if (item.IsTrialLesson())
    {
        <div class="added-event type3" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【體驗檢測】" data-event-id="@(item.LessonID)" data-link="#"></div>
    }
    else if (item.IsSTSession())
    {
        <div class="added-event type1" data-date="@($"{item.ClassTime:yyyy-MM-dd}")" data-title="@($"{item.ClassTime:yyyy-MM-dd HH:mm}")-@($"{item.ClassTime.Value.AddMinutes(item.DurationInMinutes.Value):HH:mm}")【S.T】" data-event-id="@(item.LessonID)" data-link="#"></div>
    }
}
@{
    var eventItems = models.GetTable<UserEvent>()
         .Where(t => (t.StartDate >= startDate && t.StartDate < endDate)
                 || (t.EndDate >= startDate && t.EndDate < endDate)
                 || (t.StartDate < startDate && t.EndDate >= endDate))
         .Where(t => !t.EventType.HasValue)
         .Where(t => !t.SystemEventID.HasValue)
         .Where(t => t.UID == _model.UID);
}
@foreach (var item in eventItems)
{
    for (var d = new DateTime(Math.Max(item.StartDate.Date.Ticks, startDate.Value.Ticks)); d < new DateTime(Math.Min(item.EndDate.Date.AddDays(1).Ticks, endDate.Value.Ticks)); d = d.AddDays(1))
    {
        var hasLesson = items.Any(l => l.ClassTime >= d && l.ClassTime < d.AddDays(1));
        <div class="@($"added-event type{(hasLesson ? 2 : 4)}")" data-date="@($"{d:yyyy-MM-dd}")" data-title="@((item.StartDate-d).TotalHours>0 ? $"{item.StartDate:yyyy-MM-dd HH:mm}" : $"{d:yyyy-MM-dd}") @(item.Title)" data-event-id="@(item.EventID)" data-link="#"></div>
    }
}



