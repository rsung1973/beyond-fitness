
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Newtonsoft.Json
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    IQueryable<CoachMonthlySalary> _model;
    String _dialogID = $"reportQuery{DateTime.Now.Ticks}";

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"]; ;
    _model = (IQueryable<CoachMonthlySalary>)this.Model;

    AchievementQueryViewModel _viewModel = (AchievementQueryViewModel)ViewBag.ViewModel;
    var targetItems = _model.Where(d => !d.SpecialBonus.HasValue && !d.ManagerBonus.HasValue);

    ViewBag.HeaderRaw = (Action)showHeader;
    ViewBag.InsertPartial = "~/Views/BonusCredit/BonusModal/GiveBonusAmount.cshtml";
    ViewBag.SelectAll = false;
    ViewBag.EnableClose = false;
    ViewBag.Allotment = 1;
    ViewBag.AllotmentCoach = 4;
    await Html.RenderPartialAsync("~/Views/ContractConsole/ContractModal/SelectCoach.cshtml", models.PromptEffectiveCoach());
}

@{
    void showHeader()
    {

    }
}

    <script>
    $(function () {
        $global.commitCoach = function (coachID, coachName, $dialog) {
            var managerBonus = $dialog.find('input[name="ManagerBonus"]').val();
            var specialBonus = $dialog.find('input[name="SpecialBonus"]').val();

            if (!isNaN(managerBonus) && !isNaN(specialBonus)) {
                clearErrors();
                showLoading();
                $.post('@Html.Raw(Url.Action("CommitCoachBonus","BonusCredit"))', { 'byCoachID': [coachID], 'managerBonus': managerBonus, 'specialBonus': specialBonus,'AchievementDateFrom':'@($"{_viewModel.AchievementDateFrom:yyyy/MM/dd}")' }, function (data) {
                    if ($.isPlainObject(data)) {
                        if (data.result) {
                            $global.closeAllModal();
                            showCoachBonusList();
                        } else {
                            hideLoading();
                            Swal.fire(
                                'Oops...',
                                data.message,
                                'warning'
                            );
                        }
                    } else {
                        hideLoading();
                        $(data).appendTo('body').remove();
                    }
                });
            }
        };
    });
    </script>