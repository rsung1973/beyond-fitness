

@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Newtonsoft.Json
@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;
    MonthlyIndicatorQueryViewModel _viewModel;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _modelState = ViewContext.ModelState;
    _viewModel = (MonthlyIndicatorQueryViewModel)ViewBag.ViewModel;


}
<div class="header">
    @{
        ViewBag.DisabledMenu = true;
        await Html.RenderPartialAsync("~/Views/Common/SelectMonthlyInterval.cshtml",
                            new String[]
                            {
                                "queryInterval",
                                "javascript:showThreeMonthBarChart();",
                                "javascript:showSixMonthBarChart();",
                                "javascript:showYearBarChart();",
                                "javascript:showMoreQueryModal();",
                                });
    }
</div>
<div class="body">
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
            @{
                await Html.RenderPartialAsync("~/Views/BusinessConsole/Module2021/AttendancePerformanceChart.cshtml");
            }
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-12" id="performanceList">
            @{
                IGrouping<DateTime, dynamic>[] items = TempData["GroupItems"] as IGrouping<DateTime, dynamic>[];
                await Html.RenderPartialAsync("~/Views/BusinessConsole/Module2021/AttendancePerformanceList.cshtml", items);
            }
        </div>
    </div>
</div>
@{
    DateTime idx = DateTime.Today.AddMonths(-1).FirstDayOfMonth();
}
<script>

    function showThreeMonthBarChart() {
        $global.viewModel.DateFrom = '@($"{idx.AddMonths(-2):yyyy/MM/dd}")';
        $global.viewModel.DateTo = '@($"{idx:yyyy/MM/dd}")';
        inquireAttendancePerformance($global.viewModel);
    }

    function showSixMonthBarChart() {
        $global.viewModel.DateFrom = '@($"{idx.AddMonths(-5):yyyy/MM/dd}")';
        $global.viewModel.DateTo = '@($"{idx:yyyy/MM/dd}")';
        inquireAttendancePerformance($global.viewModel);
    }

    function showYearBarChart() {
        $global.viewModel.DateFrom = '@($"{idx.AddMonths(-12):yyyy/MM/dd}")';
        $global.viewModel.DateTo = '@($"{idx:yyyy/MM/dd}")';
        inquireAttendancePerformance($global.viewModel);
    }

    function inquireAttendancePerformance(viewModel) {

        showLoading();
        $.post('@Html.Raw(Url.Action("InquireAttendancePerformance", "AchievementConsole"))', viewModel, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                alert(data.message);
            } else {
                $('#performanceList').empty()
                    .append($(data));
            }
        });
    }

    function showMoreQueryModal() {

        if ($global.appliedDialog && $global.appliedDialog['attendanceQuery']) {
            $global.appliedDialog['attendanceQuery'].modal('show');
            return;
        }
        $global.achievementConsole.doQuery['attendanceQuery'] = function (viewModel) {
            inquireAttendancePerformance(viewModel);
        };
        $global.viewModel.DialogID = 'attendanceQuery';
        showLoading();
        $.post('@Html.Raw(Url.Action("SelectQueryCondition", "AchievementConsole"))', $global.viewModel, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                alert(data.message);
            } else {
                $(data).appendTo($('body'));
            }
        });
    }

    $(function () {
        $('#queryInterval').text('@($"{_viewModel.DateFrom:yyyyMM}")-@($"{_viewModel.DateTo:yyyyMM}")');
    });

</script>