
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Newtonsoft.Json
@{
    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    MonthlyIndicator _model;
    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _model = (MonthlyIndicator)this.Model;
}
@{
    String _viewID = $"lessonsBar{DateTime.Now.Ticks}";
    MonthlyIndicatorQueryViewModel _viewModel = (MonthlyIndicatorQueryViewModel)ViewBag.ViewModel;
}
@{

    IGrouping<DateTime, MonthlyBranchRevenueGoal>[] groups = (IGrouping<DateTime, MonthlyBranchRevenueGoal>[])TempData["PeriodGroup"];

    var totals = groups.Select(g => g.Sum(b => b.ActualCompleteLessonCount + b.ActualCompletePICount + b.ActualCompleteTSCount + b.ATCount + b.SRCount + b.SDCount)).ToArray();
    var PTCount = groups.Select(g => (object)g.Sum(b => b.ActualCompleteLessonCount)).ToList();
    var PICount = groups.Select(g => (object)g.Sum(b => b.ActualCompletePICount)).ToList();
    var TSCount = groups.Select(g => (object)g.Sum(b => b.ActualCompleteTSCount)).ToList();
    var ATCount = groups.Select(g => (object)g.Sum(b => b.ATCount)).ToList();
    var SRCount = groups.Select(g => (object)g.Sum(b => b.SRCount)).ToList();
    var SDCount = groups.Select(g => (object)g.Sum(b => b.SDCount)).ToList();

    PTCount.Insert(0, "data1");
    PICount.Insert(0, "data2");
    TSCount.Insert(0, "data3");
    ATCount.Insert(0, "data4");
    SRCount.Insert(0, "data5");
    SDCount.Insert(0, "data6");

}
<div id="@(_viewID)" class="c3"></div>
<script>
        //顯示比較近三個月上課與收款業績概況
    $(function () {

        var totals = @Html.Raw(JsonConvert.SerializeObject(totals));
        var chart = c3.generate({
            bindto: '#@(_viewID)', // id of chart wrapper
            data: {
                columns: [
                    @Html.Raw(JsonConvert.SerializeObject(PTCount)),
                    @Html.Raw(JsonConvert.SerializeObject(PICount)),
                    @Html.Raw(JsonConvert.SerializeObject(TSCount)),
                    @Html.Raw(JsonConvert.SerializeObject(ATCount)),
                    @Html.Raw(JsonConvert.SerializeObject(SRCount)),
                    @Html.Raw(JsonConvert.SerializeObject(SDCount)),
                ],
                order: null,
                types: {
                    'data1': 'bar',
                    'data2': 'bar',
                    'data3': 'bar',
                    'data4': 'bar',
                    'data5': 'bar',
                    'data6': 'bar',
                },
                groups: [
                    ['data1', 'data2', 'data3','data4', 'data5', 'data6']
                ],
                colors: {
                    'data1': '#F1A139',
                    'data2': '#3B9740',
                    'data3': '#C2454F',
                    'data4': '#42454F',
                    'data5': '#C2554F',
                    'data6': '#A2456F',
                },
                names: {
                    // name of each serie
                    'data1': 'P.T',
                    'data2': 'P.I',
                    'data3': 'T.S',
                    'data4': 'A.T',
                    'data5': 'S.R',
                    'data6': 'S.D',
                },
                labels: {
                    format: {
                        //                            data1: function(v, id, i, j) {
                        //                                return v;
                        //                            },
                        data3: function (v, id, i, j) {
                            return totals[i];
                        }
                    }
                }
            },
            axis: {
                x: {
                    type: 'category',
                    // name of each category
                    categories: @Html.Raw(JsonConvert.SerializeObject(TempData["Category"])),
                },
                y: {
                    show: true,
                    label: {
                        text: '課數',
                        position: 'outer-middle'
                    }
                }
            },
            bar: {
                width: 'auto'
            },
            legend: {
                show: true, //hide legend
            },
            padding: {
                bottom: 0,
                top: 0
            },
            grid: {
                x: {
                    show: false
                },
                y: {
                    show: false,
                    @*lines: [{
                        value: @(groups[groups.Length-1].Sum(g=>g.CompleteLessonsGoal)),
                        text: '目標',
                        position: 'start',
                        class: 'target'
                    }]*@
                }
            }
        });
        d3.select('#@(_viewID)').selectAll('.c3-texts-data1').selectAll('text.c3-text').attr('dy', 80);
    });

</script>