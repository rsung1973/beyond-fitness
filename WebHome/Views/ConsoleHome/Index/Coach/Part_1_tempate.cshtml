

@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using WebHome.Components

@using Newtonsoft.Json

@{
    ModelSource<UserProfile> models;
    ModelStateDictionary _modelState;
    UserProfile _model;
    LessonTimeBookingViewModel _viewModel;

    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _modelState = ViewContext.ModelState;
    _model = (UserProfile)this.Model;
    _viewModel = (LessonTimeBookingViewModel)ViewBag.ViewModel;

    DateTime eventDate = _viewModel.ClassTimeStart ?? DateTime.Today;

}

<!--本日課表&各類數字-->
<div class="container-fluid">
    <div class="card">
        <div class="body">
            <div class="row">
                <div class="col-lg-5 col-md-4 col-sm-12">
                    <div class="row clearfix">
                        <div class="col-md-11 col-lg-12 col-9">
                        </div>
                        <div class="col-md-11 col-lg-12 col-3">
                            <button class="btn btn-default btn-sm hidden-sm-up m-t-0 float-right" data-toggle="collapse" data-target="#open-events" aria-expanded="false" aria-controls="collapseExample">點擊後不再是問題</button>
                        </div>
                    </div>
                    <div class="collapse-xs collapse-sm collapse" id="open-events">
                        <div class="card top_counter">
                            @RenderSection("LearnerBirthInfo")
                        </div>
                        <div class="card top_counter">
                            @RenderSection("LessonInfo")
                        </div>
                        <div class="card top_counter">
                            @RenderSection("ContractInfo")
                        </div>
                    </div>
                </div>
                <div class="col-lg-7 col-md-8 col-sm-12">
                    <div class="page-calendar">
                        <div class="new_timeline">
                            <div class="header" id="eventItems">
                                <div class="color-overlay" id="eventDate">
                                    @{
                                        await Html.RenderPartialAsync("~/Views/ConsoleHome/Index/Coach/Part_1/EventDate.cshtml");
                                    }
                                </div>
                            </div>
                            @{
//await Component.InvokeAsync(typeof(CalendarEventItemsViewComponent),
//                        new FullCalendarViewModel
//                        {
//                            KeyID = _model.UID.EncryptKey(),
//                            MasterVer = Naming.MasterVersion.Ver2020,
//                            DateFrom = DateTime.Today,
//                            DateTo = DateTime.Today,
//                        });
                            }
                        </div>

                        <!--
                                    <button class="btn btn-darkteal btn-round waves-effect"><i class="zmdi zmdi-chevron-left"></i></button>
                                    <button class="btn btn-darkteal btn-round waves-effect float-right"><i class="zmdi zmdi-chevron-right"></i></button>
    -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    var $eventItems;
    $(function () {
        $eventItems = $('#eventItems').next('div');
    });

    function equipEventDate($item) {
        $item.datetimepicker({
            language: 'zh-TW',
            format: 'yyyy/mm/dd',
            defaultDate: new Date(),
            weekStart: 1,
            todayBtn: 1,
            clearBtn: 1,
            autoclose: 1,
            todayHighlight: 1,
            startView: 2,
            minView: 2,
            defaultView: 2,
            forceParse: 0,
        }).on('changeDate', function (ev) {
            showEventDate(ev.date.toLocaleDateString());
        });
    }

    var classTimeStart = (new Date()).toLocaleDateString();
    function showEventDate(date) {
        classTimeStart = date;
        showLoading();
        $('#eventDate').load('@Html.Raw(Url.Action("ShowEventDate","ConsoleHome"))', { 'classTimeStart': date });
        $.post('@Html.Raw(Url.Action("CalendarEventItems", "ConsoleHome", new { KeyID = _model.UID.EncryptKey(), MasterVer = Naming.MasterVersion.Ver2020, }))', { 'dateFrom': date, 'dateTo': date }, function (data) {

            hideLoading();
            if ($.isPlainObject(data)) {
                alert(data.message);
            } else {
                if ($eventItems) {
                    $eventItems.remove();
                }
                $eventItems = $(data);
                $('#eventItems').after($eventItems);
            }
        });

    }

    function refreshEvents() {
        showEventDate(classTimeStart);
    }

    function showLessonEventModal(keyID, event) {
        var event = event || window.event;
        $global.target = $(event.target).closest('div.event-name');
        showLoading();
        $.post('@Html.Raw(Url.Action("ShowLessonEventModal", "ConsoleEvent"))', { 'keyID': keyID }, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                alert(data.message);
            } else {
                $(data).appendTo($('body'));
            }
        });
    }

    function showUserEventModal(keyID, event) {
        var event = event || window.event;
        $global.target = $(event.target).closest('div.event-name');
        showLoading();
        $.post('@Html.Raw(Url.Action("ShowUserEventModal", "ConsoleEvent"))', { 'keyID': keyID }, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                alert(data.message);
            } else {
                $(data).appendTo($('body'));
            }
        });
    }

    function deleteLesson(keyID) {
        deleteData(function (onSuccess) {
            showLoading();
            $.post('@Html.Raw(Url.Action("RevokeBooking", "ConsoleEvent"))', { 'keyID': keyID }, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    if (data.result) {
                        if ($global.target) {
                            $global.target.remove();
                        } else {
                            refreshEvents();
                        }
                        refetchCalendarEvents();
                        $global.closeAllModal();
                        onSuccess();
                    } else {
                        Swal.fire(
                            'Oops...',
                            data.message,
                            'warning'
                        )
                    }
                } else {
                    $(data).appendTo($('body'));
                }
            });
        });
    }

    function bookingCustomEvent(args) {
        showLoading();
        $.post('@Html.Raw(Url.Action("BookingCustomEvent", "ConsoleEvent"))', args, function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
                Swal.fire(
                    'Oops...',
                    data.message,
                    'warning'
                )
            } else {
                $(data).appendTo($('body'));
            }
        });
    }

    function deleteUserEvent(keyID) {
        deleteData(function (onSuccess) {
            showLoading();
            $.post('@Html.Raw(Url.Action("RevokeCoachEvent", "ConsoleEvent"))', { 'keyID': keyID }, function (data) {
                hideLoading();
                if ($.isPlainObject(data)) {
                    if (data.result) {
                        if ($global.target && $global.target.length > 0) {
                            $global.target.remove();
                        } else {
                            refreshEvents();
                        }
                        refetchCalendarEvents();
                        $global.closeAllModal();
                        onSuccess();
                    } else {
                        Swal.fire(
                            'Oops...',
                            data.message,
                            'warning'
                        )
                    }
                } else {
                    $(data).appendTo($('body'));
                }
            });
        });
    }

        //
</script>