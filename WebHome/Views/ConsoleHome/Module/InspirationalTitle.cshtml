
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding


@{
    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _userProfile;
    GlobalStaticViewModel globalViewModel = GlobalStaticViewModel.Instance;

    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _userProfile = await Context.GetUserAsync();

    if (globalViewModel.ArticleItem == null || globalViewModel.Expiration < DateTime.Now.Ticks)
    {
        lock (this.GetType())
        {
            if (globalViewModel.ArticleItem == null || globalViewModel.Expiration < DateTime.Now.Ticks)
            {
                globalViewModel.Expiration = DateTime.Today.AddDays(1).Ticks;
                var items = models.GetTable<Document>().Where(d => d.DocType == (int)Naming.DocumentTypeDefinition.Inspirational)
                    .Select(d => d.Article.Publication)
                    .Where(p => p.StartDate < DateTime.Today.AddDays(1) && (!p.EndDate.HasValue || p.EndDate >= DateTime.Today))
                    .Select(p => p.Article)
                    .OrderBy(a => a.DocID);

                var count = items.Count();
                if (count > 0)
                {
                    int skipCount = (int)(DateTime.Now.Ticks % count);
                    globalViewModel.ArticleItem = items.Skip(skipCount).Take(1).FirstOrDefault();
                    if (globalViewModel.ArticleItem != null)
                    {
                        var p = globalViewModel.ArticleItem.UserProfile;
                    }
                }
            }
        }
    }

}


@if (_userProfile != null && _userProfile.CurrentUserRole?.RoleID != (int)Naming.RoleID.Learner)
{
    if (globalViewModel.ArticleItem != null)
    {
        @(globalViewModel.ArticleItem.Title)
    }
}

