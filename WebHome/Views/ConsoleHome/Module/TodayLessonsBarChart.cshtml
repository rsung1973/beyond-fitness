
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using Newtonsoft.Json
@{

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    UserProfile _model;
    string _chartID = "lessonsBar" + DateTime.Now.Ticks;
    IEnumerable<int> _hourIdx;


    _modelState = ViewContext.ModelState;
    models = (ModelSource<UserProfile>)ViewContext.HttpContext.Items["Models"];;
    _model = (UserProfile)this.Model;
    _hourIdx = Enumerable.Range(7, 16);

}
@{ var items = models.GetTable<LessonTime>().Where(l => l.ClassTime >= DateTime.Today && l.ClassTime < DateTime.Today.AddDays(1));}
@if (_model.IsManager() || _model.IsViceManager())
{
    var branch = models.GetTable<BranchStore>().Where(b => b.ManagerID == _model.UID || b.ViceManagerID == _model.UID)
            .Select(b => b.BranchID).FirstOrDefault();
    items = items.Where(l => l.BranchID == branch);
}
 @{ 
     var PTLessons = items.PTLesson()
        .Select(l => l.ClassTime.Value.Hour)
        .GroupBy(h => h)
        .Select(g => new _Counting { Hour = g.Key, Count = g.Count() })
        .ToList();
     var PILessons = items.Where(l => l.TrainingBySelf == 1)
             .Select(l => l.ClassTime.Value.Hour)
             .GroupBy(h => h)
             .Select(g => new _Counting { Hour = g.Key, Count = g.Count() })
             .ToList();
     var TrialLessons = items.TrialLesson()
             .Select(l => l.ClassTime.Value.Hour)
             .GroupBy(h => h)
             .Select(g => new _Counting { Hour = g.Key, Count = g.Count() })
             .ToList();}

<canvas id="@(_chartID)" class="bar-chart"></canvas>
<script>
    $(function () {
        var barChartData = {
            labels: @Html.Raw(JsonConvert.SerializeObject(_hourIdx.Select(h=>$"{h:00}:00"))),
            datasets: [{
                label: "P.T",
                backgroundColor: "rgba(245, 166, 35, .43)",
                data: @Html.Raw(JsonConvert.SerializeObject(getDistribution(PTLessons,_hourIdx))),
            }, {
                label: "P.I",
                backgroundColor: "rgba(238,170,170, .43)",
                data: @Html.Raw(JsonConvert.SerializeObject(getDistribution(PILessons, _hourIdx))),
            }, {
                label: "體驗",
                backgroundColor: "rgba(197,182,226, .43)",
                data: @Html.Raw(JsonConvert.SerializeObject(getDistribution(TrialLessons, _hourIdx))),
            }]
        };
        var chartConfig = {
            type: 'bar',
            data: barChartData,
            options: {
                responsive: true,
                legend: false,
                scales: {
                    xAxes: [{
                        stacked: true,
                        beginAtZero: true,
                        fontColor: '#05232d',
                        ticks: {
                            fontSize: 18,
                            fontStyle: 'bold'
                        }
                    }],
                    yAxes: [{
                        stacked: true,
                        beginAtZero: true,
                        fontColor: '#05232d',
                        ticks: {
                            fontSize: 20,
                            fontStyle: 'bold'
                        }
                    }]
                }
            }
        };

        var initGraph = $global.initGraph;
        $global.initGraph = function () {
            if (initGraph) {
                initGraph();
            }
            window.myBarChart = new Chart(document.getElementById("@(_chartID)"), chartConfig);
        };

    });
</script>
@{ await Html.RenderPartialAsync("~/Views/ConsoleHome/Shared/InitBarChartNoRegister.cshtml");}


@functions {
    class _Counting
    {
        public int Hour { get; set; }
        public int Count { get; set; }
    }

    IEnumerable<int> getDistribution(IEnumerable<_Counting> items, IEnumerable<int> hourIdx)
    {
        foreach (var h in hourIdx)
        {
            yield return items.Where(i => i.Hour == h).Select(i => i.Count).FirstOrDefault();
        }
    }
}
