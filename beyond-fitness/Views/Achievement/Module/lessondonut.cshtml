
@using System.IO
@using System.Linq.Expressions

@using WebHome.Helper
@using WebHome.Models.Locale
@using WebHome.Models.ViewModel
@using WebHome.Models.DataEntity
@using WebHome.Controllers

<canvas id="@(_chartID)"></canvas>
<script>

    //debugger;
    $(function () {

        var ctx = document.getElementById('@(_chartID)').getContext('2d');

        var chartConfig = {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: null,
                    backgroundColor:
                        [@if (_branch.BranchID == 1)
                            {
                        'rgba(146, 203, 128, .8)',
                        'rgba(69, 167, 52, .8)',
                        'rgba(18, 35, 16, .8)',
                    }
                            else if (_branch.BranchID == 2)
                            {
                        'rgba(223, 152, 134, 1)',
                        'rgba(209, 109, 82, 1)',
                        'rgba(122, 51, 31, 1)',
                    }
                            else
                            {
                        'rgba(161, 221, 219, .8)',
                        'rgba(76, 191, 188, .8)',
                        'rgba(27, 75, 73, .8)',
                    }
                        ],
                    label: '',
                    borderWidth: [1, 1, 1]
        }],
                labels: [
                    'P.T',
                    'P.I',
                    '體驗'
                ]
    },
            options: {
                responsive: true,
                legend: {
                    display: true,
                    position: 'top',
                    labels: {
                        fontColor: '#D3D3D3'
                    }
                },

                title: {
                    display: true,
                    text: '@(_branch.BranchName + "(%)")',
                    fontColor: '#D3D3D3'
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                }
            }
        };

        if (!$global.updateBranchDonut) {
            $global.updateBranchDonut = [];
            $global.myBranchDonut = [];
        }

        $global.updateBranchDonut[@(_branch.BranchID)] = function (formData) {
            showLoading();
            $.post('@(Url.Action("InquireBranchDonut", "Achievement",new { _branch.BranchID }))', formData, function (data) {
                hideLoading();
                if (Array.isArray(data)) {
                    if ($global.myBranchDonut[@(_branch.BranchID)]) {
                        $global.myBranchDonut[@(_branch.BranchID)].data.datasets[0].data = data;
                        $global.myBranchDonut[@(_branch.BranchID)].update();
                    } else {
                        chartConfig.data.datasets[0].data = data;
                        $global.myBranchDonut[@(_branch.BranchID)] = new Chart(ctx, chartConfig);
                    }
                } else {
                    $(data).appendTo($('body'));
                }
            });
        };
    });
</script>

<script runat="server">

    ModelStateDictionary _modelState;
    ModelSource<UserProfile> models;
    IQueryable<LessonTime> _model;
    AchievementQueryViewModel _viewModel;
    String _chartID;
    BranchStore _branch;

    protected override void OnInit(EventArgs e)
    {
        base.OnInit(e);
        _modelState = (ModelStateDictionary)ViewBag.ModelState;
        models = ((SampleController<UserProfile>)ViewContext.Controller).DataSource;
        _model = (IQueryable<LessonTime>)this.Model;
        _viewModel = (AchievementQueryViewModel)ViewBag.ViewModel;
        _branch = (BranchStore)ViewBag.BranchStore;
        if (_branch == null)
            _branch = models.GetTable<BranchStore>().First();
        _chartID = $"donut{DateTime.Now.Ticks}_{_branch.BranchID}";
    }

</script>
