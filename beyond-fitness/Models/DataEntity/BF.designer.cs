#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebHome.Models.DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BeyondFitness")]
	public partial class BFDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserRoleDefinition(UserRoleDefinition instance);
    partial void UpdateUserRoleDefinition(UserRoleDefinition instance);
    partial void DeleteUserRoleDefinition(UserRoleDefinition instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertDocumentType(DocumentType instance);
    partial void UpdateDocumentType(DocumentType instance);
    partial void DeleteDocumentType(DocumentType instance);
    partial void InsertLevelExpression(LevelExpression instance);
    partial void UpdateLevelExpression(LevelExpression instance);
    partial void DeleteLevelExpression(LevelExpression instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertResetPassword(ResetPassword instance);
    partial void UpdateResetPassword(ResetPassword instance);
    partial void DeleteResetPassword(ResetPassword instance);
    partial void InsertServingCoach(ServingCoach instance);
    partial void UpdateServingCoach(ServingCoach instance);
    partial void DeleteServingCoach(ServingCoach instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertLessonPriceType(LessonPriceType instance);
    partial void UpdateLessonPriceType(LessonPriceType instance);
    partial void DeleteLessonPriceType(LessonPriceType instance);
    partial void InsertGroupingLesson(GroupingLesson instance);
    partial void UpdateGroupingLesson(GroupingLesson instance);
    partial void DeleteGroupingLesson(GroupingLesson instance);
    partial void InsertRegisterLesson(RegisterLesson instance);
    partial void UpdateRegisterLesson(RegisterLesson instance);
    partial void DeleteRegisterLesson(RegisterLesson instance);
    partial void InsertLessonTime(LessonTime instance);
    partial void UpdateLessonTime(LessonTime instance);
    partial void DeleteLessonTime(LessonTime instance);
    partial void InsertLessonTimeExpansion(LessonTimeExpansion instance);
    partial void UpdateLessonTimeExpansion(LessonTimeExpansion instance);
    partial void DeleteLessonTimeExpansion(LessonTimeExpansion instance);
    partial void InsertTrainingItem(TrainingItem instance);
    partial void UpdateTrainingItem(TrainingItem instance);
    partial void DeleteTrainingItem(TrainingItem instance);
    partial void InsertTrainingType(TrainingType instance);
    partial void UpdateTrainingType(TrainingType instance);
    partial void DeleteTrainingType(TrainingType instance);
    partial void InsertLessonPlan(LessonPlan instance);
    partial void UpdateLessonPlan(LessonPlan instance);
    partial void DeleteLessonPlan(LessonPlan instance);
    partial void InsertTrainingExecution(TrainingExecution instance);
    partial void UpdateTrainingExecution(TrainingExecution instance);
    partial void DeleteTrainingExecution(TrainingExecution instance);
    partial void InsertTrainingPlan(TrainingPlan instance);
    partial void UpdateTrainingPlan(TrainingPlan instance);
    partial void DeleteTrainingPlan(TrainingPlan instance);
    #endregion
		
		public BFDataContext() : 
				base(global::WebHome.Properties.Settings.Default.BFDbConnection, mappingSource)
		{
			OnCreated();
		}
		
		public BFDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BFDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BFDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BFDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserRoleDefinition> UserRoleDefinitions
		{
			get
			{
				return this.GetTable<UserRoleDefinition>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<DocumentType> DocumentTypes
		{
			get
			{
				return this.GetTable<DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<LevelExpression> LevelExpressions
		{
			get
			{
				return this.GetTable<LevelExpression>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRole
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<ResetPassword> ResetPasswords
		{
			get
			{
				return this.GetTable<ResetPassword>();
			}
		}
		
		public System.Data.Linq.Table<ServingCoach> ServingCoach
		{
			get
			{
				return this.GetTable<ServingCoach>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfile
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<LessonPriceType> LessonPriceType
		{
			get
			{
				return this.GetTable<LessonPriceType>();
			}
		}
		
		public System.Data.Linq.Table<GroupingLesson> GroupingLesson
		{
			get
			{
				return this.GetTable<GroupingLesson>();
			}
		}
		
		public System.Data.Linq.Table<RegisterLesson> RegisterLesson
		{
			get
			{
				return this.GetTable<RegisterLesson>();
			}
		}
		
		public System.Data.Linq.Table<LessonTime> LessonTime
		{
			get
			{
				return this.GetTable<LessonTime>();
			}
		}
		
		public System.Data.Linq.Table<LessonTimeExpansion> LessonTimeExpansion
		{
			get
			{
				return this.GetTable<LessonTimeExpansion>();
			}
		}
		
		public System.Data.Linq.Table<TrainingItem> TrainingItem
		{
			get
			{
				return this.GetTable<TrainingItem>();
			}
		}
		
		public System.Data.Linq.Table<TrainingType> TrainingType
		{
			get
			{
				return this.GetTable<TrainingType>();
			}
		}
		
		public System.Data.Linq.Table<LessonPlan> LessonPlan
		{
			get
			{
				return this.GetTable<LessonPlan>();
			}
		}
		
		public System.Data.Linq.Table<TrainingExecution> TrainingExecution
		{
			get
			{
				return this.GetTable<TrainingExecution>();
			}
		}
		
		public System.Data.Linq.Table<TrainingPlan> TrainingPlan
		{
			get
			{
				return this.GetTable<TrainingPlan>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleDefinition")]
	public partial class UserRoleDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _SiteMenu;
		
		private string _Role;
		
		private EntitySet<UserRole> _UserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnSiteMenuChanging(string value);
    partial void OnSiteMenuChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public UserRoleDefinition()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteMenu", DbType="NVarChar(64)")]
		public string SiteMenu
		{
			get
			{
				return this._SiteMenu;
			}
			set
			{
				if ((this._SiteMenu != value))
				{
					this.OnSiteMenuChanging(value);
					this.SendPropertyChanging();
					this._SiteMenu = value;
					this.SendPropertyChanged("SiteMenu");
					this.OnSiteMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRoleDefinition_UserRole", Storage="_UserRole", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserRoleDefinition = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserRoleDefinition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private System.Nullable<int> _DocType;
		
		private System.DateTime _DocDate;
		
		private System.Nullable<int> _CurrentStep;
		
		private System.Nullable<int> _ChannelID;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnDocTypeChanging(System.Nullable<int> value);
    partial void OnDocTypeChanged();
    partial void OnDocDateChanging(System.DateTime value);
    partial void OnDocDateChanged();
    partial void OnCurrentStepChanging(System.Nullable<int> value);
    partial void OnCurrentStepChanged();
    partial void OnChannelIDChanging(System.Nullable<int> value);
    partial void OnChannelIDChanged();
    #endregion
		
		public Document()
		{
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._Article = default(EntityRef<Article>);
			this._DocumentType = default(EntityRef<DocumentType>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocType", DbType="Int")]
		public System.Nullable<int> DocType
		{
			get
			{
				return this._DocType;
			}
			set
			{
				if ((this._DocType != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocTypeChanging(value);
					this.SendPropertyChanging();
					this._DocType = value;
					this.SendPropertyChanged("DocType");
					this.OnDocTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime NOT NULL")]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStep", DbType="Int")]
		public System.Nullable<int> CurrentStep
		{
			get
			{
				return this._CurrentStep;
			}
			set
			{
				if ((this._CurrentStep != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentStepChanging(value);
					this.SendPropertyChanging();
					this._CurrentStep = value;
					this.SendPropertyChanged("CurrentStep");
					this.OnCurrentStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelID", DbType="Int")]
		public System.Nullable<int> ChannelID
		{
			get
			{
				return this._ChannelID;
			}
			set
			{
				if ((this._ChannelID != value))
				{
					this.OnChannelIDChanging(value);
					this.SendPropertyChanging();
					this._ChannelID = value;
					this.SendPropertyChanged("ChannelID");
					this.OnChannelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Attachment", Storage="_Attachments", ThisKey="DocID", OtherKey="DocID")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Article", Storage="_Article", ThisKey="DocID", OtherKey="DocID", IsUnique=true, IsForeignKey=false)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Document = null;
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Document = this;
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Document", Storage="_DocumentType", ThisKey="DocType", OtherKey="TypeID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._DocType = value.TypeID;
					}
					else
					{
						this._DocType = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_Document", Storage="_LevelExpression", ThisKey="CurrentStep", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._CurrentStep = value.LevelID;
					}
					else
					{
						this._CurrentStep = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentType")]
	public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public DocumentType()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(128)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_Document", Storage="_Documents", ThisKey="TypeID", OtherKey="DocType")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LevelExpression")]
	public partial class LevelExpression : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelID;
		
		private string _Expression;
		
		private string _Description;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<UserProfile> _UserProfile;
		
		private EntitySet<LessonPriceType> _LessonPriceType;
		
		private EntitySet<RegisterLesson> _RegisterLesson;
		
		private EntitySet<TrainingPlan> _TrainingPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LevelExpression()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._UserProfile = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile), new Action<UserProfile>(this.detach_UserProfile));
			this._LessonPriceType = new EntitySet<LessonPriceType>(new Action<LessonPriceType>(this.attach_LessonPriceType), new Action<LessonPriceType>(this.detach_LessonPriceType));
			this._RegisterLesson = new EntitySet<RegisterLesson>(new Action<RegisterLesson>(this.attach_RegisterLesson), new Action<RegisterLesson>(this.detach_RegisterLesson));
			this._TrainingPlan = new EntitySet<TrainingPlan>(new Action<TrainingPlan>(this.attach_TrainingPlan), new Action<TrainingPlan>(this.detach_TrainingPlan));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_Document", Storage="_Documents", ThisKey="LevelID", OtherKey="CurrentStep")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_UserProfile", Storage="_UserProfile", ThisKey="LevelID", OtherKey="LevelID")]
		public EntitySet<UserProfile> UserProfile
		{
			get
			{
				return this._UserProfile;
			}
			set
			{
				this._UserProfile.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_LessonPriceType", Storage="_LessonPriceType", ThisKey="LevelID", OtherKey="Status")]
		public EntitySet<LessonPriceType> LessonPriceType
		{
			get
			{
				return this._LessonPriceType;
			}
			set
			{
				this._LessonPriceType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_RegisterLesson", Storage="_RegisterLesson", ThisKey="LevelID", OtherKey="Attended")]
		public EntitySet<RegisterLesson> RegisterLesson
		{
			get
			{
				return this._RegisterLesson;
			}
			set
			{
				this._RegisterLesson.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_TrainingPlan", Storage="_TrainingPlan", ThisKey="LevelID", OtherKey="PlanStatus")]
		public EntitySet<TrainingPlan> TrainingPlan
		{
			get
			{
				return this._TrainingPlan;
			}
			set
			{
				this._TrainingPlan.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_LessonPriceType(LessonPriceType entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_LessonPriceType(LessonPriceType entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_TrainingPlan(TrainingPlan entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_TrainingPlan(TrainingPlan entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentID;
		
		private string _StoredPath;
		
		private System.Nullable<int> _DocID;
		
		private EntitySet<Article> _Articles;
		
		private EntitySet<UserProfile> _UserProfile;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIDChanging(int value);
    partial void OnAttachmentIDChanged();
    partial void OnStoredPathChanging(string value);
    partial void OnStoredPathChanged();
    partial void OnDocIDChanging(System.Nullable<int> value);
    partial void OnDocIDChanged();
    #endregion
		
		public Attachment()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			this._UserProfile = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile), new Action<UserProfile>(this.detach_UserProfile));
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttachmentID
		{
			get
			{
				return this._AttachmentID;
			}
			set
			{
				if ((this._AttachmentID != value))
				{
					this.OnAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentID = value;
					this.SendPropertyChanged("AttachmentID");
					this.OnAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string StoredPath
		{
			get
			{
				return this._StoredPath;
			}
			set
			{
				if ((this._StoredPath != value))
				{
					this.OnStoredPathChanging(value);
					this.SendPropertyChanging();
					this._StoredPath = value;
					this.SendPropertyChanged("StoredPath");
					this.OnStoredPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int")]
		public System.Nullable<int> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_Article", Storage="_Articles", ThisKey="AttachmentID", OtherKey="Illustration")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_UserProfile", Storage="_UserProfile", ThisKey="AttachmentID", OtherKey="PictureID")]
		public EntitySet<UserProfile> UserProfile
		{
			get
			{
				return this._UserProfile;
			}
			set
			{
				this._UserProfile.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Attachment", Storage="_Document", ThisKey="DocID", OtherKey="DocID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._DocID = value.DocID;
					}
					else
					{
						this._DocID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = null;
		}
		
		private void attach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = this;
		}
		
		private void detach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private string _Title;
		
		private string _ArticleContent;
		
		private System.Nullable<int> _AuthorID;
		
		private System.Nullable<int> _Illustration;
		
		private EntityRef<Attachment> _Attachment;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnArticleContentChanging(string value);
    partial void OnArticleContentChanged();
    partial void OnAuthorIDChanging(System.Nullable<int> value);
    partial void OnAuthorIDChanged();
    partial void OnIllustrationChanging(System.Nullable<int> value);
    partial void OnIllustrationChanged();
    #endregion
		
		public Article()
		{
			this._Attachment = default(EntityRef<Attachment>);
			this._Document = default(EntityRef<Document>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(256)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleContent", DbType="NVarChar(MAX)")]
		public string ArticleContent
		{
			get
			{
				return this._ArticleContent;
			}
			set
			{
				if ((this._ArticleContent != value))
				{
					this.OnArticleContentChanging(value);
					this.SendPropertyChanging();
					this._ArticleContent = value;
					this.SendPropertyChanged("ArticleContent");
					this.OnArticleContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int")]
		public System.Nullable<int> AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Illustration", DbType="Int")]
		public System.Nullable<int> Illustration
		{
			get
			{
				return this._Illustration;
			}
			set
			{
				if ((this._Illustration != value))
				{
					if (this._Attachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIllustrationChanging(value);
					this.SendPropertyChanging();
					this._Illustration = value;
					this.SendPropertyChanged("Illustration");
					this.OnIllustrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_Article", Storage="_Attachment", ThisKey="Illustration", OtherKey="AttachmentID", IsForeignKey=true)]
		public Attachment Attachment
		{
			get
			{
				return this._Attachment.Entity;
			}
			set
			{
				Attachment previousValue = this._Attachment.Entity;
				if (((previousValue != value) 
							|| (this._Attachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attachment.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._Attachment.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._Illustration = value.AttachmentID;
					}
					else
					{
						this._Illustration = default(Nullable<int>);
					}
					this.SendPropertyChanged("Attachment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Article", Storage="_Document", ThisKey="DocID", OtherKey="DocID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Article = null;
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Article = this;
						this._DocID = value.DocID;
					}
					else
					{
						this._DocID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Article", Storage="_UserProfile", ThisKey="AuthorID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Article.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Article.Add(this);
						this._AuthorID = value.UID;
					}
					else
					{
						this._AuthorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _RoleID;
		
		private EntityRef<UserRoleDefinition> _UserRoleDefinition;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UserRole()
		{
			this._UserRoleDefinition = default(EntityRef<UserRoleDefinition>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._UserRoleDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRoleDefinition_UserRole", Storage="_UserRoleDefinition", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public UserRoleDefinition UserRoleDefinition
		{
			get
			{
				return this._UserRoleDefinition.Entity;
			}
			set
			{
				UserRoleDefinition previousValue = this._UserRoleDefinition.Entity;
				if (((previousValue != value) 
							|| (this._UserRoleDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRoleDefinition.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._UserRoleDefinition.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("UserRoleDefinition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserRole", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResetPassword")]
	public partial class ResetPassword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResetID;
		
		private int _UID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResetIDChanging(System.Guid value);
    partial void OnResetIDChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    #endregion
		
		public ResetPassword()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResetID
		{
			get
			{
				return this._ResetID;
			}
			set
			{
				if ((this._ResetID != value))
				{
					this.OnResetIDChanging(value);
					this.SendPropertyChanging();
					this._ResetID = value;
					this.SendPropertyChanged("ResetID");
					this.OnResetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ResetPassword", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ResetPassword.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ResetPassword.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServingCoach")]
	public partial class ServingCoach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoachID;
		
		private EntitySet<LessonTime> _LessonTime;
		
		private EntitySet<LessonTime> _LessonTime1;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoachIDChanging(int value);
    partial void OnCoachIDChanged();
    #endregion
		
		public ServingCoach()
		{
			this._LessonTime = new EntitySet<LessonTime>(new Action<LessonTime>(this.attach_LessonTime), new Action<LessonTime>(this.detach_LessonTime));
			this._LessonTime1 = new EntitySet<LessonTime>(new Action<LessonTime>(this.attach_LessonTime1), new Action<LessonTime>(this.detach_LessonTime1));
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoachID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CoachID
		{
			get
			{
				return this._CoachID;
			}
			set
			{
				if ((this._CoachID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoachIDChanging(value);
					this.SendPropertyChanging();
					this._CoachID = value;
					this.SendPropertyChanged("CoachID");
					this.OnCoachIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServingCoach_LessonTime", Storage="_LessonTime", ThisKey="CoachID", OtherKey="InvitedCoach")]
		public EntitySet<LessonTime> InvitingLesson
		{
			get
			{
				return this._LessonTime;
			}
			set
			{
				this._LessonTime.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServingCoach_LessonTime1", Storage="_LessonTime1", ThisKey="CoachID", OtherKey="AttendingCoach")]
		public EntitySet<LessonTime> TeachingLesson
		{
			get
			{
				return this._LessonTime1;
			}
			set
			{
				this._LessonTime1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ServingCoach", Storage="_UserProfile", ThisKey="CoachID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ServingCoach = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ServingCoach = this;
						this._CoachID = value.UID;
					}
					else
					{
						this._CoachID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LessonTime(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.AsInvitedCoach = this;
		}
		
		private void detach_LessonTime(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.AsInvitedCoach = null;
		}
		
		private void attach_LessonTime1(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.AsAttendingCoach = this;
		}
		
		private void detach_LessonTime1(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.AsAttendingCoach = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _UserName;
		
		private string _PID;
		
		private string _Password;
		
		private string _ExternalID;
		
		private System.Nullable<System.DateTime> _Expiration;
		
		private System.Nullable<int> _Creator;
		
		private System.Nullable<int> _AuthID;
		
		private System.Nullable<int> _LevelID;
		
		private string _ThemeName;
		
		private string _Password2;
		
		private string _MemberCode;
		
		private System.Nullable<int> _PictureID;
		
		private string _RealName;
		
		private string _Address;
		
		private string _Phone;
		
		private EntitySet<Article> _Article;
		
		private EntitySet<UserRole> _UserRole;
		
		private EntitySet<ResetPassword> _ResetPassword;
		
		private EntityRef<ServingCoach> _ServingCoach;
		
		private EntitySet<UserProfile> _UserProfile2;
		
		private EntitySet<UserProfile> _UserProfile4;
		
		private EntitySet<RegisterLesson> _RegisterLesson;
		
		private EntityRef<Attachment> _Attachment;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
		private EntityRef<UserProfile> _UserProfile1;
		
		private EntityRef<UserProfile> _UserProfile3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnExternalIDChanging(string value);
    partial void OnExternalIDChanged();
    partial void OnExpirationChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationChanged();
    partial void OnCreatorChanging(System.Nullable<int> value);
    partial void OnCreatorChanged();
    partial void OnAuthIDChanging(System.Nullable<int> value);
    partial void OnAuthIDChanged();
    partial void OnLevelIDChanging(System.Nullable<int> value);
    partial void OnLevelIDChanged();
    partial void OnThemeNameChanging(string value);
    partial void OnThemeNameChanged();
    partial void OnPassword2Changing(string value);
    partial void OnPassword2Changed();
    partial void OnMemberCodeChanging(string value);
    partial void OnMemberCodeChanged();
    partial void OnPictureIDChanging(System.Nullable<int> value);
    partial void OnPictureIDChanged();
    partial void OnRealNameChanging(string value);
    partial void OnRealNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public UserProfile()
		{
			this._Article = new EntitySet<Article>(new Action<Article>(this.attach_Article), new Action<Article>(this.detach_Article));
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			this._ResetPassword = new EntitySet<ResetPassword>(new Action<ResetPassword>(this.attach_ResetPassword), new Action<ResetPassword>(this.detach_ResetPassword));
			this._ServingCoach = default(EntityRef<ServingCoach>);
			this._UserProfile2 = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile2), new Action<UserProfile>(this.detach_UserProfile2));
			this._UserProfile4 = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile4), new Action<UserProfile>(this.detach_UserProfile4));
			this._RegisterLesson = new EntitySet<RegisterLesson>(new Action<RegisterLesson>(this.attach_RegisterLesson), new Action<RegisterLesson>(this.detach_RegisterLesson));
			this._Attachment = default(EntityRef<Attachment>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			this._UserProfile1 = default(EntityRef<UserProfile>);
			this._UserProfile3 = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(40)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalID", DbType="NVarChar(64)")]
		public string ExternalID
		{
			get
			{
				return this._ExternalID;
			}
			set
			{
				if ((this._ExternalID != value))
				{
					this.OnExternalIDChanging(value);
					this.SendPropertyChanging();
					this._ExternalID = value;
					this.SendPropertyChanged("ExternalID");
					this.OnExternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiration", DbType="DateTime")]
		public System.Nullable<System.DateTime> Expiration
		{
			get
			{
				return this._Expiration;
			}
			set
			{
				if ((this._Expiration != value))
				{
					this.OnExpirationChanging(value);
					this.SendPropertyChanging();
					this._Expiration = value;
					this.SendPropertyChanged("Expiration");
					this.OnExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="Int")]
		public System.Nullable<int> Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._UserProfile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthID", DbType="Int")]
		public System.Nullable<int> AuthID
		{
			get
			{
				return this._AuthID;
			}
			set
			{
				if ((this._AuthID != value))
				{
					if (this._UserProfile3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthIDChanging(value);
					this.SendPropertyChanging();
					this._AuthID = value;
					this.SendPropertyChanged("AuthID");
					this.OnAuthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int")]
		public System.Nullable<int> LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeName", DbType="NVarChar(16)")]
		public string ThemeName
		{
			get
			{
				return this._ThemeName;
			}
			set
			{
				if ((this._ThemeName != value))
				{
					this.OnThemeNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeName = value;
					this.SendPropertyChanged("ThemeName");
					this.OnThemeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password2", DbType="NVarChar(64)")]
		public string Password2
		{
			get
			{
				return this._Password2;
			}
			set
			{
				if ((this._Password2 != value))
				{
					this.OnPassword2Changing(value);
					this.SendPropertyChanging();
					this._Password2 = value;
					this.SendPropertyChanged("Password2");
					this.OnPassword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberCode", DbType="NVarChar(16)")]
		public string MemberCode
		{
			get
			{
				return this._MemberCode;
			}
			set
			{
				if ((this._MemberCode != value))
				{
					this.OnMemberCodeChanging(value);
					this.SendPropertyChanging();
					this._MemberCode = value;
					this.SendPropertyChanged("MemberCode");
					this.OnMemberCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureID", DbType="Int")]
		public System.Nullable<int> PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					if (this._Attachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealName", DbType="NVarChar(40)")]
		public string RealName
		{
			get
			{
				return this._RealName;
			}
			set
			{
				if ((this._RealName != value))
				{
					this.OnRealNameChanging(value);
					this.SendPropertyChanging();
					this._RealName = value;
					this.SendPropertyChanged("RealName");
					this.OnRealNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(32)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Article", Storage="_Article", ThisKey="UID", OtherKey="AuthorID")]
		public EntitySet<Article> Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				this._Article.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserRole", Storage="_UserRole", ThisKey="UID", OtherKey="UID")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ResetPassword", Storage="_ResetPassword", ThisKey="UID", OtherKey="UID")]
		public EntitySet<ResetPassword> ResetPassword
		{
			get
			{
				return this._ResetPassword;
			}
			set
			{
				this._ResetPassword.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ServingCoach", Storage="_ServingCoach", ThisKey="UID", OtherKey="CoachID", IsUnique=true, IsForeignKey=false)]
		public ServingCoach ServingCoach
		{
			get
			{
				return this._ServingCoach.Entity;
			}
			set
			{
				ServingCoach previousValue = this._ServingCoach.Entity;
				if (((previousValue != value) 
							|| (this._ServingCoach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServingCoach.Entity = null;
						previousValue.UserProfile = null;
					}
					this._ServingCoach.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("ServingCoach");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile", Storage="_UserProfile2", ThisKey="UID", OtherKey="Creator")]
		public EntitySet<UserProfile> UserProfile2
		{
			get
			{
				return this._UserProfile2;
			}
			set
			{
				this._UserProfile2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile1", Storage="_UserProfile4", ThisKey="UID", OtherKey="AuthID")]
		public EntitySet<UserProfile> UserProfile4
		{
			get
			{
				return this._UserProfile4;
			}
			set
			{
				this._UserProfile4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_RegisterLesson", Storage="_RegisterLesson", ThisKey="UID", OtherKey="UID")]
		public EntitySet<RegisterLesson> RegisterLesson
		{
			get
			{
				return this._RegisterLesson;
			}
			set
			{
				this._RegisterLesson.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_UserProfile", Storage="_Attachment", ThisKey="PictureID", OtherKey="AttachmentID", IsForeignKey=true)]
		public Attachment Attachment
		{
			get
			{
				return this._Attachment.Entity;
			}
			set
			{
				Attachment previousValue = this._Attachment.Entity;
				if (((previousValue != value) 
							|| (this._Attachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attachment.Entity = null;
						previousValue.UserProfile.Remove(this);
					}
					this._Attachment.Entity = value;
					if ((value != null))
					{
						value.UserProfile.Add(this);
						this._PictureID = value.AttachmentID;
					}
					else
					{
						this._PictureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Attachment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_UserProfile", Storage="_LevelExpression", ThisKey="LevelID", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.UserProfile.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.UserProfile.Add(this);
						this._LevelID = value.LevelID;
					}
					else
					{
						this._LevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile", Storage="_UserProfile1", ThisKey="Creator", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile1
		{
			get
			{
				return this._UserProfile1.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile1.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile1.Entity = null;
						previousValue.UserProfile2.Remove(this);
					}
					this._UserProfile1.Entity = value;
					if ((value != null))
					{
						value.UserProfile2.Add(this);
						this._Creator = value.UID;
					}
					else
					{
						this._Creator = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile1", Storage="_UserProfile3", ThisKey="AuthID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile3
		{
			get
			{
				return this._UserProfile3.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile3.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile3.Entity = null;
						previousValue.UserProfile4.Remove(this);
					}
					this._UserProfile3.Entity = value;
					if ((value != null))
					{
						value.UserProfile4.Add(this);
						this._AuthID = value.UID;
					}
					else
					{
						this._AuthID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Article(Article entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Article(Article entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ResetPassword(ResetPassword entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ResetPassword(ResetPassword entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserProfile2(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = this;
		}
		
		private void detach_UserProfile2(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = null;
		}
		
		private void attach_UserProfile4(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile3 = this;
		}
		
		private void detach_UserProfile4(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile3 = null;
		}
		
		private void attach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonPriceType")]
	public partial class LessonPriceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriceID;
		
		private string _Description;
		
		private System.Nullable<int> _ListPrice;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<RegisterLesson> _RegisterLesson;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIDChanging(int value);
    partial void OnPriceIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnListPriceChanging(System.Nullable<int> value);
    partial void OnListPriceChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public LessonPriceType()
		{
			this._RegisterLesson = new EntitySet<RegisterLesson>(new Action<RegisterLesson>(this.attach_RegisterLesson), new Action<RegisterLesson>(this.detach_RegisterLesson));
			this._LevelExpression = default(EntityRef<LevelExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PriceID
		{
			get
			{
				return this._PriceID;
			}
			set
			{
				if ((this._PriceID != value))
				{
					this.OnPriceIDChanging(value);
					this.SendPropertyChanging();
					this._PriceID = value;
					this.SendPropertyChanged("PriceID");
					this.OnPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(64)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListPrice", DbType="Int")]
		public System.Nullable<int> ListPrice
		{
			get
			{
				return this._ListPrice;
			}
			set
			{
				if ((this._ListPrice != value))
				{
					this.OnListPriceChanging(value);
					this.SendPropertyChanging();
					this._ListPrice = value;
					this.SendPropertyChanged("ListPrice");
					this.OnListPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonPriceType_RegisterLesson", Storage="_RegisterLesson", ThisKey="PriceID", OtherKey="ClassLevel")]
		public EntitySet<RegisterLesson> RegisterLesson
		{
			get
			{
				return this._RegisterLesson;
			}
			set
			{
				this._RegisterLesson.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_LessonPriceType", Storage="_LevelExpression", ThisKey="Status", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.LessonPriceType.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.LessonPriceType.Add(this);
						this._Status = value.LevelID;
					}
					else
					{
						this._Status = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.LessonPriceType = this;
		}
		
		private void detach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.LessonPriceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupingLesson")]
	public partial class GroupingLesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private EntitySet<RegisterLesson> _RegisterLesson;
		
		private EntitySet<LessonTime> _LessonTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public GroupingLesson()
		{
			this._RegisterLesson = new EntitySet<RegisterLesson>(new Action<RegisterLesson>(this.attach_RegisterLesson), new Action<RegisterLesson>(this.detach_RegisterLesson));
			this._LessonTime = new EntitySet<LessonTime>(new Action<LessonTime>(this.attach_LessonTime), new Action<LessonTime>(this.detach_LessonTime));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupingLesson_RegisterLesson", Storage="_RegisterLesson", ThisKey="GroupID", OtherKey="RegisterGroupID")]
		public EntitySet<RegisterLesson> RegisterLesson
		{
			get
			{
				return this._RegisterLesson;
			}
			set
			{
				this._RegisterLesson.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupingLesson_LessonTime", Storage="_LessonTime", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<LessonTime> LessonTime
		{
			get
			{
				return this._LessonTime;
			}
			set
			{
				this._LessonTime.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.GroupingLesson = this;
		}
		
		private void detach_RegisterLesson(RegisterLesson entity)
		{
			this.SendPropertyChanging();
			entity.GroupingLesson = null;
		}
		
		private void attach_LessonTime(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.GroupingLesson = this;
		}
		
		private void detach_LessonTime(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.GroupingLesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisterLesson")]
	public partial class RegisterLesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegisterID;
		
		private System.DateTime _RegisterDate;
		
		private int _Lessons;
		
		private int _UID;
		
		private System.Nullable<int> _ClassLevel;
		
		private System.Nullable<int> _Attended;
		
		private System.Nullable<int> _RegisterGroupID;
		
		private int _GroupingMemberCount;
		
		private EntitySet<LessonTime> _LessonTime;
		
		private EntitySet<LessonTimeExpansion> _LessonTimeExpansion;
		
		private EntityRef<GroupingLesson> _GroupingLesson;
		
		private EntityRef<LessonPriceType> _LessonPriceType;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegisterIDChanging(int value);
    partial void OnRegisterIDChanged();
    partial void OnRegisterDateChanging(System.DateTime value);
    partial void OnRegisterDateChanged();
    partial void OnLessonsChanging(int value);
    partial void OnLessonsChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnClassLevelChanging(System.Nullable<int> value);
    partial void OnClassLevelChanged();
    partial void OnAttendedChanging(System.Nullable<int> value);
    partial void OnAttendedChanged();
    partial void OnRegisterGroupIDChanging(System.Nullable<int> value);
    partial void OnRegisterGroupIDChanged();
    partial void OnGroupingMemberCountChanging(int value);
    partial void OnGroupingMemberCountChanged();
    #endregion
		
		public RegisterLesson()
		{
			this._LessonTime = new EntitySet<LessonTime>(new Action<LessonTime>(this.attach_LessonTime), new Action<LessonTime>(this.detach_LessonTime));
			this._LessonTimeExpansion = new EntitySet<LessonTimeExpansion>(new Action<LessonTimeExpansion>(this.attach_LessonTimeExpansion), new Action<LessonTimeExpansion>(this.detach_LessonTimeExpansion));
			this._GroupingLesson = default(EntityRef<GroupingLesson>);
			this._LessonPriceType = default(EntityRef<LessonPriceType>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegisterID
		{
			get
			{
				return this._RegisterID;
			}
			set
			{
				if ((this._RegisterID != value))
				{
					this.OnRegisterIDChanging(value);
					this.SendPropertyChanging();
					this._RegisterID = value;
					this.SendPropertyChanged("RegisterID");
					this.OnRegisterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this.OnRegisterDateChanging(value);
					this.SendPropertyChanging();
					this._RegisterDate = value;
					this.SendPropertyChanged("RegisterDate");
					this.OnRegisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lessons", DbType="Int NOT NULL")]
		public int Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				if ((this._Lessons != value))
				{
					this.OnLessonsChanging(value);
					this.SendPropertyChanging();
					this._Lessons = value;
					this.SendPropertyChanged("Lessons");
					this.OnLessonsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassLevel", DbType="Int")]
		public System.Nullable<int> ClassLevel
		{
			get
			{
				return this._ClassLevel;
			}
			set
			{
				if ((this._ClassLevel != value))
				{
					if (this._LessonPriceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassLevelChanging(value);
					this.SendPropertyChanging();
					this._ClassLevel = value;
					this.SendPropertyChanged("ClassLevel");
					this.OnClassLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attended", DbType="Int")]
		public System.Nullable<int> Attended
		{
			get
			{
				return this._Attended;
			}
			set
			{
				if ((this._Attended != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendedChanging(value);
					this.SendPropertyChanging();
					this._Attended = value;
					this.SendPropertyChanged("Attended");
					this.OnAttendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterGroupID", DbType="Int")]
		public System.Nullable<int> RegisterGroupID
		{
			get
			{
				return this._RegisterGroupID;
			}
			set
			{
				if ((this._RegisterGroupID != value))
				{
					if (this._GroupingLesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegisterGroupIDChanging(value);
					this.SendPropertyChanging();
					this._RegisterGroupID = value;
					this.SendPropertyChanged("RegisterGroupID");
					this.OnRegisterGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupingMemberCount", DbType="Int NOT NULL")]
		public int GroupingMemberCount
		{
			get
			{
				return this._GroupingMemberCount;
			}
			set
			{
				if ((this._GroupingMemberCount != value))
				{
					this.OnGroupingMemberCountChanging(value);
					this.SendPropertyChanging();
					this._GroupingMemberCount = value;
					this.SendPropertyChanged("GroupingMemberCount");
					this.OnGroupingMemberCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterLesson_LessonTime", Storage="_LessonTime", ThisKey="RegisterID", OtherKey="RegisterID")]
		public EntitySet<LessonTime> LessonTime
		{
			get
			{
				return this._LessonTime;
			}
			set
			{
				this._LessonTime.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterLesson_LessonTimeExpansion", Storage="_LessonTimeExpansion", ThisKey="RegisterID", OtherKey="RegisterID")]
		public EntitySet<LessonTimeExpansion> LessonTimeExpansion
		{
			get
			{
				return this._LessonTimeExpansion;
			}
			set
			{
				this._LessonTimeExpansion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupingLesson_RegisterLesson", Storage="_GroupingLesson", ThisKey="RegisterGroupID", OtherKey="GroupID", IsForeignKey=true, DeleteRule="SET NULL")]
		public GroupingLesson GroupingLesson
		{
			get
			{
				return this._GroupingLesson.Entity;
			}
			set
			{
				GroupingLesson previousValue = this._GroupingLesson.Entity;
				if (((previousValue != value) 
							|| (this._GroupingLesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupingLesson.Entity = null;
						previousValue.RegisterLesson.Remove(this);
					}
					this._GroupingLesson.Entity = value;
					if ((value != null))
					{
						value.RegisterLesson.Add(this);
						this._RegisterGroupID = value.GroupID;
					}
					else
					{
						this._RegisterGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupingLesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonPriceType_RegisterLesson", Storage="_LessonPriceType", ThisKey="ClassLevel", OtherKey="PriceID", IsForeignKey=true)]
		public LessonPriceType LessonPriceType
		{
			get
			{
				return this._LessonPriceType.Entity;
			}
			set
			{
				LessonPriceType previousValue = this._LessonPriceType.Entity;
				if (((previousValue != value) 
							|| (this._LessonPriceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonPriceType.Entity = null;
						previousValue.RegisterLesson.Remove(this);
					}
					this._LessonPriceType.Entity = value;
					if ((value != null))
					{
						value.RegisterLesson.Add(this);
						this._ClassLevel = value.PriceID;
					}
					else
					{
						this._ClassLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonPriceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_RegisterLesson", Storage="_LevelExpression", ThisKey="Attended", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.RegisterLesson.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.RegisterLesson.Add(this);
						this._Attended = value.LevelID;
					}
					else
					{
						this._Attended = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_RegisterLesson", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.RegisterLesson.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.RegisterLesson.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LessonTime(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.RegisterLesson = this;
		}
		
		private void detach_LessonTime(LessonTime entity)
		{
			this.SendPropertyChanging();
			entity.RegisterLesson = null;
		}
		
		private void attach_LessonTimeExpansion(LessonTimeExpansion entity)
		{
			this.SendPropertyChanging();
			entity.RegisterLesson = this;
		}
		
		private void detach_LessonTimeExpansion(LessonTimeExpansion entity)
		{
			this.SendPropertyChanging();
			entity.RegisterLesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonTime")]
	public partial class LessonTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LessonID;
		
		private int _RegisterID;
		
		private System.Nullable<System.DateTime> _ClassTime;
		
		private System.Nullable<int> _DurationInMinutes;
		
		private System.Nullable<int> _InvitedCoach;
		
		private System.Nullable<int> _AttendingCoach;
		
		private System.Nullable<int> _GroupID;
		
		private EntitySet<LessonTimeExpansion> _LessonTimeExpansion;
		
		private EntityRef<LessonPlan> _LessonPlan;
		
		private EntitySet<TrainingPlan> _TrainingPlan;
		
		private EntityRef<GroupingLesson> _GroupingLesson;
		
		private EntityRef<RegisterLesson> _RegisterLesson;
		
		private EntityRef<ServingCoach> _ServingCoach;
		
		private EntityRef<ServingCoach> _ServingCoach1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnRegisterIDChanging(int value);
    partial void OnRegisterIDChanged();
    partial void OnClassTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnClassTimeChanged();
    partial void OnDurationInMinutesChanging(System.Nullable<int> value);
    partial void OnDurationInMinutesChanged();
    partial void OnInvitedCoachChanging(System.Nullable<int> value);
    partial void OnInvitedCoachChanged();
    partial void OnAttendingCoachChanging(System.Nullable<int> value);
    partial void OnAttendingCoachChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public LessonTime()
		{
			this._LessonTimeExpansion = new EntitySet<LessonTimeExpansion>(new Action<LessonTimeExpansion>(this.attach_LessonTimeExpansion), new Action<LessonTimeExpansion>(this.detach_LessonTimeExpansion));
			this._LessonPlan = default(EntityRef<LessonPlan>);
			this._TrainingPlan = new EntitySet<TrainingPlan>(new Action<TrainingPlan>(this.attach_TrainingPlan), new Action<TrainingPlan>(this.detach_TrainingPlan));
			this._GroupingLesson = default(EntityRef<GroupingLesson>);
			this._RegisterLesson = default(EntityRef<RegisterLesson>);
			this._ServingCoach = default(EntityRef<ServingCoach>);
			this._ServingCoach1 = default(EntityRef<ServingCoach>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterID", DbType="Int NOT NULL")]
		public int RegisterID
		{
			get
			{
				return this._RegisterID;
			}
			set
			{
				if ((this._RegisterID != value))
				{
					if (this._RegisterLesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegisterIDChanging(value);
					this.SendPropertyChanging();
					this._RegisterID = value;
					this.SendPropertyChanged("RegisterID");
					this.OnRegisterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClassTime
		{
			get
			{
				return this._ClassTime;
			}
			set
			{
				if ((this._ClassTime != value))
				{
					this.OnClassTimeChanging(value);
					this.SendPropertyChanging();
					this._ClassTime = value;
					this.SendPropertyChanged("ClassTime");
					this.OnClassTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationInMinutes", DbType="Int")]
		public System.Nullable<int> DurationInMinutes
		{
			get
			{
				return this._DurationInMinutes;
			}
			set
			{
				if ((this._DurationInMinutes != value))
				{
					this.OnDurationInMinutesChanging(value);
					this.SendPropertyChanging();
					this._DurationInMinutes = value;
					this.SendPropertyChanged("DurationInMinutes");
					this.OnDurationInMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitedCoach", DbType="Int")]
		public System.Nullable<int> InvitedCoach
		{
			get
			{
				return this._InvitedCoach;
			}
			set
			{
				if ((this._InvitedCoach != value))
				{
					if (this._ServingCoach.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvitedCoachChanging(value);
					this.SendPropertyChanging();
					this._InvitedCoach = value;
					this.SendPropertyChanged("InvitedCoach");
					this.OnInvitedCoachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendingCoach", DbType="Int")]
		public System.Nullable<int> AttendingCoach
		{
			get
			{
				return this._AttendingCoach;
			}
			set
			{
				if ((this._AttendingCoach != value))
				{
					if (this._ServingCoach1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendingCoachChanging(value);
					this.SendPropertyChanging();
					this._AttendingCoach = value;
					this.SendPropertyChanged("AttendingCoach");
					this.OnAttendingCoachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._GroupingLesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonTime_LessonTimeExpansion", Storage="_LessonTimeExpansion", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<LessonTimeExpansion> LessonTimeExpansion
		{
			get
			{
				return this._LessonTimeExpansion;
			}
			set
			{
				this._LessonTimeExpansion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonTime_LessonPlan", Storage="_LessonPlan", ThisKey="LessonID", OtherKey="LessonID", IsUnique=true, IsForeignKey=false)]
		public LessonPlan LessonPlan
		{
			get
			{
				return this._LessonPlan.Entity;
			}
			set
			{
				LessonPlan previousValue = this._LessonPlan.Entity;
				if (((previousValue != value) 
							|| (this._LessonPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonPlan.Entity = null;
						previousValue.LessonTime = null;
					}
					this._LessonPlan.Entity = value;
					if ((value != null))
					{
						value.LessonTime = this;
					}
					this.SendPropertyChanged("LessonPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonTime_TrainingPlan", Storage="_TrainingPlan", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<TrainingPlan> TrainingPlan
		{
			get
			{
				return this._TrainingPlan;
			}
			set
			{
				this._TrainingPlan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupingLesson_LessonTime", Storage="_GroupingLesson", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public GroupingLesson GroupingLesson
		{
			get
			{
				return this._GroupingLesson.Entity;
			}
			set
			{
				GroupingLesson previousValue = this._GroupingLesson.Entity;
				if (((previousValue != value) 
							|| (this._GroupingLesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupingLesson.Entity = null;
						previousValue.LessonTime.Remove(this);
					}
					this._GroupingLesson.Entity = value;
					if ((value != null))
					{
						value.LessonTime.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupingLesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterLesson_LessonTime", Storage="_RegisterLesson", ThisKey="RegisterID", OtherKey="RegisterID", IsForeignKey=true)]
		public RegisterLesson RegisterLesson
		{
			get
			{
				return this._RegisterLesson.Entity;
			}
			set
			{
				RegisterLesson previousValue = this._RegisterLesson.Entity;
				if (((previousValue != value) 
							|| (this._RegisterLesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisterLesson.Entity = null;
						previousValue.LessonTime.Remove(this);
					}
					this._RegisterLesson.Entity = value;
					if ((value != null))
					{
						value.LessonTime.Add(this);
						this._RegisterID = value.RegisterID;
					}
					else
					{
						this._RegisterID = default(int);
					}
					this.SendPropertyChanged("RegisterLesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServingCoach_LessonTime", Storage="_ServingCoach", ThisKey="InvitedCoach", OtherKey="CoachID", IsForeignKey=true)]
		public ServingCoach AsInvitedCoach
		{
			get
			{
				return this._ServingCoach.Entity;
			}
			set
			{
				ServingCoach previousValue = this._ServingCoach.Entity;
				if (((previousValue != value) 
							|| (this._ServingCoach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServingCoach.Entity = null;
						previousValue.InvitingLesson.Remove(this);
					}
					this._ServingCoach.Entity = value;
					if ((value != null))
					{
						value.InvitingLesson.Add(this);
						this._InvitedCoach = value.CoachID;
					}
					else
					{
						this._InvitedCoach = default(Nullable<int>);
					}
					this.SendPropertyChanged("AsInvitedCoach");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServingCoach_LessonTime1", Storage="_ServingCoach1", ThisKey="AttendingCoach", OtherKey="CoachID", IsForeignKey=true)]
		public ServingCoach AsAttendingCoach
		{
			get
			{
				return this._ServingCoach1.Entity;
			}
			set
			{
				ServingCoach previousValue = this._ServingCoach1.Entity;
				if (((previousValue != value) 
							|| (this._ServingCoach1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServingCoach1.Entity = null;
						previousValue.TeachingLesson.Remove(this);
					}
					this._ServingCoach1.Entity = value;
					if ((value != null))
					{
						value.TeachingLesson.Add(this);
						this._AttendingCoach = value.CoachID;
					}
					else
					{
						this._AttendingCoach = default(Nullable<int>);
					}
					this.SendPropertyChanged("AsAttendingCoach");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LessonTimeExpansion(LessonTimeExpansion entity)
		{
			this.SendPropertyChanging();
			entity.LessonTime = this;
		}
		
		private void detach_LessonTimeExpansion(LessonTimeExpansion entity)
		{
			this.SendPropertyChanging();
			entity.LessonTime = null;
		}
		
		private void attach_TrainingPlan(TrainingPlan entity)
		{
			this.SendPropertyChanging();
			entity.LessonTime = this;
		}
		
		private void detach_TrainingPlan(TrainingPlan entity)
		{
			this.SendPropertyChanging();
			entity.LessonTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonTimeExpansion")]
	public partial class LessonTimeExpansion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _ClassDate;
		
		private int _Hour;
		
		private int _RegisterID;
		
		private System.Nullable<int> _LessonID;
		
		private EntityRef<LessonTime> _LessonTime;
		
		private EntityRef<RegisterLesson> _RegisterLesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassDateChanging(System.DateTime value);
    partial void OnClassDateChanged();
    partial void OnHourChanging(int value);
    partial void OnHourChanged();
    partial void OnRegisterIDChanging(int value);
    partial void OnRegisterIDChanged();
    partial void OnLessonIDChanging(System.Nullable<int> value);
    partial void OnLessonIDChanged();
    #endregion
		
		public LessonTimeExpansion()
		{
			this._LessonTime = default(EntityRef<LessonTime>);
			this._RegisterLesson = default(EntityRef<RegisterLesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime ClassDate
		{
			get
			{
				return this._ClassDate;
			}
			set
			{
				if ((this._ClassDate != value))
				{
					this.OnClassDateChanging(value);
					this.SendPropertyChanging();
					this._ClassDate = value;
					this.SendPropertyChanged("ClassDate");
					this.OnClassDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hour", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Hour
		{
			get
			{
				return this._Hour;
			}
			set
			{
				if ((this._Hour != value))
				{
					this.OnHourChanging(value);
					this.SendPropertyChanging();
					this._Hour = value;
					this.SendPropertyChanged("Hour");
					this.OnHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RegisterID
		{
			get
			{
				return this._RegisterID;
			}
			set
			{
				if ((this._RegisterID != value))
				{
					if (this._RegisterLesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegisterIDChanging(value);
					this.SendPropertyChanging();
					this._RegisterID = value;
					this.SendPropertyChanged("RegisterID");
					this.OnRegisterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int")]
		public System.Nullable<int> LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._LessonTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonTime_LessonTimeExpansion", Storage="_LessonTime", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true, DeleteRule="CASCADE")]
		public LessonTime LessonTime
		{
			get
			{
				return this._LessonTime.Entity;
			}
			set
			{
				LessonTime previousValue = this._LessonTime.Entity;
				if (((previousValue != value) 
							|| (this._LessonTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonTime.Entity = null;
						previousValue.LessonTimeExpansion.Remove(this);
					}
					this._LessonTime.Entity = value;
					if ((value != null))
					{
						value.LessonTimeExpansion.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterLesson_LessonTimeExpansion", Storage="_RegisterLesson", ThisKey="RegisterID", OtherKey="RegisterID", IsForeignKey=true)]
		public RegisterLesson RegisterLesson
		{
			get
			{
				return this._RegisterLesson.Entity;
			}
			set
			{
				RegisterLesson previousValue = this._RegisterLesson.Entity;
				if (((previousValue != value) 
							|| (this._RegisterLesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisterLesson.Entity = null;
						previousValue.LessonTimeExpansion.Remove(this);
					}
					this._RegisterLesson.Entity = value;
					if ((value != null))
					{
						value.LessonTimeExpansion.Add(this);
						this._RegisterID = value.RegisterID;
					}
					else
					{
						this._RegisterID = default(int);
					}
					this.SendPropertyChanged("RegisterLesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingItem")]
	public partial class TrainingItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private int _TrainingID;
		
		private System.Nullable<int> _GoalTurns;
		
		private string _GoalStrength;
		
		private int _ExecutionID;
		
		private string _Description;
		
		private EntityRef<TrainingType> _TrainingType;
		
		private EntityRef<TrainingExecution> _TrainingExecution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnTrainingIDChanging(int value);
    partial void OnTrainingIDChanged();
    partial void OnGoalTurnsChanging(System.Nullable<int> value);
    partial void OnGoalTurnsChanged();
    partial void OnGoalStrengthChanging(string value);
    partial void OnGoalStrengthChanged();
    partial void OnExecutionIDChanging(int value);
    partial void OnExecutionIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TrainingItem()
		{
			this._TrainingType = default(EntityRef<TrainingType>);
			this._TrainingExecution = default(EntityRef<TrainingExecution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingID", DbType="Int NOT NULL")]
		public int TrainingID
		{
			get
			{
				return this._TrainingID;
			}
			set
			{
				if ((this._TrainingID != value))
				{
					if (this._TrainingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingID = value;
					this.SendPropertyChanged("TrainingID");
					this.OnTrainingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalTurns", DbType="Int")]
		public System.Nullable<int> GoalTurns
		{
			get
			{
				return this._GoalTurns;
			}
			set
			{
				if ((this._GoalTurns != value))
				{
					this.OnGoalTurnsChanging(value);
					this.SendPropertyChanging();
					this._GoalTurns = value;
					this.SendPropertyChanged("GoalTurns");
					this.OnGoalTurnsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalStrength", DbType="NVarChar(16)")]
		public string GoalStrength
		{
			get
			{
				return this._GoalStrength;
			}
			set
			{
				if ((this._GoalStrength != value))
				{
					this.OnGoalStrengthChanging(value);
					this.SendPropertyChanging();
					this._GoalStrength = value;
					this.SendPropertyChanged("GoalStrength");
					this.OnGoalStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionID", DbType="Int NOT NULL")]
		public int ExecutionID
		{
			get
			{
				return this._ExecutionID;
			}
			set
			{
				if ((this._ExecutionID != value))
				{
					if (this._TrainingExecution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionIDChanging(value);
					this.SendPropertyChanging();
					this._ExecutionID = value;
					this.SendPropertyChanged("ExecutionID");
					this.OnExecutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(32)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingType_TrainingItem", Storage="_TrainingType", ThisKey="TrainingID", OtherKey="TrainingID", IsForeignKey=true)]
		public TrainingType TrainingType
		{
			get
			{
				return this._TrainingType.Entity;
			}
			set
			{
				TrainingType previousValue = this._TrainingType.Entity;
				if (((previousValue != value) 
							|| (this._TrainingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingType.Entity = null;
						previousValue.TrainingItem.Remove(this);
					}
					this._TrainingType.Entity = value;
					if ((value != null))
					{
						value.TrainingItem.Add(this);
						this._TrainingID = value.TrainingID;
					}
					else
					{
						this._TrainingID = default(int);
					}
					this.SendPropertyChanged("TrainingType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingExecution_TrainingItem", Storage="_TrainingExecution", ThisKey="ExecutionID", OtherKey="ExecutionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingExecution TrainingExecution
		{
			get
			{
				return this._TrainingExecution.Entity;
			}
			set
			{
				TrainingExecution previousValue = this._TrainingExecution.Entity;
				if (((previousValue != value) 
							|| (this._TrainingExecution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingExecution.Entity = null;
						previousValue.TrainingItem.Remove(this);
					}
					this._TrainingExecution.Entity = value;
					if ((value != null))
					{
						value.TrainingItem.Add(this);
						this._ExecutionID = value.ExecutionID;
					}
					else
					{
						this._ExecutionID = default(int);
					}
					this.SendPropertyChanged("TrainingExecution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingType")]
	public partial class TrainingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingID;
		
		private string _BodyParts;
		
		private EntitySet<TrainingItem> _TrainingItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingIDChanging(int value);
    partial void OnTrainingIDChanged();
    partial void OnBodyPartsChanging(string value);
    partial void OnBodyPartsChanged();
    #endregion
		
		public TrainingType()
		{
			this._TrainingItem = new EntitySet<TrainingItem>(new Action<TrainingItem>(this.attach_TrainingItem), new Action<TrainingItem>(this.detach_TrainingItem));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingID
		{
			get
			{
				return this._TrainingID;
			}
			set
			{
				if ((this._TrainingID != value))
				{
					this.OnTrainingIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingID = value;
					this.SendPropertyChanged("TrainingID");
					this.OnTrainingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyParts", DbType="NVarChar(16)")]
		public string BodyParts
		{
			get
			{
				return this._BodyParts;
			}
			set
			{
				if ((this._BodyParts != value))
				{
					this.OnBodyPartsChanging(value);
					this.SendPropertyChanging();
					this._BodyParts = value;
					this.SendPropertyChanged("BodyParts");
					this.OnBodyPartsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingType_TrainingItem", Storage="_TrainingItem", ThisKey="TrainingID", OtherKey="TrainingID")]
		public EntitySet<TrainingItem> TrainingItem
		{
			get
			{
				return this._TrainingItem;
			}
			set
			{
				this._TrainingItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingItem(TrainingItem entity)
		{
			this.SendPropertyChanging();
			entity.TrainingType = this;
		}
		
		private void detach_TrainingItem(TrainingItem entity)
		{
			this.SendPropertyChanging();
			entity.TrainingType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonPlan")]
	public partial class LessonPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LessonID;
		
		private string _Remark;
		
		private string _Warming;
		
		private string _RecentStatus;
		
		private string _EndingOperation;
		
		private EntityRef<LessonTime> _LessonTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnWarmingChanging(string value);
    partial void OnWarmingChanged();
    partial void OnRecentStatusChanging(string value);
    partial void OnRecentStatusChanged();
    partial void OnEndingOperationChanging(string value);
    partial void OnEndingOperationChanged();
    #endregion
		
		public LessonPlan()
		{
			this._LessonTime = default(EntityRef<LessonTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._LessonTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Warming", DbType="NVarChar(MAX)")]
		public string Warming
		{
			get
			{
				return this._Warming;
			}
			set
			{
				if ((this._Warming != value))
				{
					this.OnWarmingChanging(value);
					this.SendPropertyChanging();
					this._Warming = value;
					this.SendPropertyChanged("Warming");
					this.OnWarmingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecentStatus", DbType="NVarChar(MAX)")]
		public string RecentStatus
		{
			get
			{
				return this._RecentStatus;
			}
			set
			{
				if ((this._RecentStatus != value))
				{
					this.OnRecentStatusChanging(value);
					this.SendPropertyChanging();
					this._RecentStatus = value;
					this.SendPropertyChanged("RecentStatus");
					this.OnRecentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingOperation", DbType="NVarChar(MAX)")]
		public string EndingOperation
		{
			get
			{
				return this._EndingOperation;
			}
			set
			{
				if ((this._EndingOperation != value))
				{
					this.OnEndingOperationChanging(value);
					this.SendPropertyChanging();
					this._EndingOperation = value;
					this.SendPropertyChanged("EndingOperation");
					this.OnEndingOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonTime_LessonPlan", Storage="_LessonTime", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public LessonTime LessonTime
		{
			get
			{
				return this._LessonTime.Entity;
			}
			set
			{
				LessonTime previousValue = this._LessonTime.Entity;
				if (((previousValue != value) 
							|| (this._LessonTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonTime.Entity = null;
						previousValue.LessonPlan = null;
					}
					this._LessonTime.Entity = value;
					if ((value != null))
					{
						value.LessonPlan = this;
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(int);
					}
					this.SendPropertyChanged("LessonTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingExecution")]
	public partial class TrainingExecution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExecutionID;
		
		private System.Nullable<int> _BreakIntervalInSecond;
		
		private System.Nullable<int> _Repeats;
		
		private EntitySet<TrainingItem> _TrainingItem;
		
		private EntityRef<TrainingPlan> _TrainingPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExecutionIDChanging(int value);
    partial void OnExecutionIDChanged();
    partial void OnBreakIntervalInSecondChanging(System.Nullable<int> value);
    partial void OnBreakIntervalInSecondChanged();
    partial void OnRepeatsChanging(System.Nullable<int> value);
    partial void OnRepeatsChanged();
    #endregion
		
		public TrainingExecution()
		{
			this._TrainingItem = new EntitySet<TrainingItem>(new Action<TrainingItem>(this.attach_TrainingItem), new Action<TrainingItem>(this.detach_TrainingItem));
			this._TrainingPlan = default(EntityRef<TrainingPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExecutionID
		{
			get
			{
				return this._ExecutionID;
			}
			set
			{
				if ((this._ExecutionID != value))
				{
					if (this._TrainingPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionIDChanging(value);
					this.SendPropertyChanging();
					this._ExecutionID = value;
					this.SendPropertyChanged("ExecutionID");
					this.OnExecutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakIntervalInSecond", DbType="Int")]
		public System.Nullable<int> BreakIntervalInSecond
		{
			get
			{
				return this._BreakIntervalInSecond;
			}
			set
			{
				if ((this._BreakIntervalInSecond != value))
				{
					this.OnBreakIntervalInSecondChanging(value);
					this.SendPropertyChanging();
					this._BreakIntervalInSecond = value;
					this.SendPropertyChanged("BreakIntervalInSecond");
					this.OnBreakIntervalInSecondChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repeats", DbType="Int")]
		public System.Nullable<int> Repeats
		{
			get
			{
				return this._Repeats;
			}
			set
			{
				if ((this._Repeats != value))
				{
					this.OnRepeatsChanging(value);
					this.SendPropertyChanging();
					this._Repeats = value;
					this.SendPropertyChanged("Repeats");
					this.OnRepeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingExecution_TrainingItem", Storage="_TrainingItem", ThisKey="ExecutionID", OtherKey="ExecutionID")]
		public EntitySet<TrainingItem> TrainingItem
		{
			get
			{
				return this._TrainingItem;
			}
			set
			{
				this._TrainingItem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingPlan_TrainingExecution", Storage="_TrainingPlan", ThisKey="ExecutionID", OtherKey="ExecutionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingPlan TrainingPlan
		{
			get
			{
				return this._TrainingPlan.Entity;
			}
			set
			{
				TrainingPlan previousValue = this._TrainingPlan.Entity;
				if (((previousValue != value) 
							|| (this._TrainingPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingPlan.Entity = null;
						previousValue.TrainingExecution = null;
					}
					this._TrainingPlan.Entity = value;
					if ((value != null))
					{
						value.TrainingExecution = this;
						this._ExecutionID = value.ExecutionID;
					}
					else
					{
						this._ExecutionID = default(int);
					}
					this.SendPropertyChanged("TrainingPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingItem(TrainingItem entity)
		{
			this.SendPropertyChanging();
			entity.TrainingExecution = this;
		}
		
		private void detach_TrainingItem(TrainingItem entity)
		{
			this.SendPropertyChanging();
			entity.TrainingExecution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingPlan")]
	public partial class TrainingPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LessonID;
		
		private int _ExecutionID;
		
		private System.Nullable<int> _PlanStatus;
		
		private EntityRef<TrainingExecution> _TrainingExecution;
		
		private EntityRef<LessonTime> _LessonTime;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnExecutionIDChanging(int value);
    partial void OnExecutionIDChanged();
    partial void OnPlanStatusChanging(System.Nullable<int> value);
    partial void OnPlanStatusChanged();
    #endregion
		
		public TrainingPlan()
		{
			this._TrainingExecution = default(EntityRef<TrainingExecution>);
			this._LessonTime = default(EntityRef<LessonTime>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL")]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._LessonTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExecutionID
		{
			get
			{
				return this._ExecutionID;
			}
			set
			{
				if ((this._ExecutionID != value))
				{
					this.OnExecutionIDChanging(value);
					this.SendPropertyChanging();
					this._ExecutionID = value;
					this.SendPropertyChanged("ExecutionID");
					this.OnExecutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanStatus", DbType="Int")]
		public System.Nullable<int> PlanStatus
		{
			get
			{
				return this._PlanStatus;
			}
			set
			{
				if ((this._PlanStatus != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanStatusChanging(value);
					this.SendPropertyChanging();
					this._PlanStatus = value;
					this.SendPropertyChanged("PlanStatus");
					this.OnPlanStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingPlan_TrainingExecution", Storage="_TrainingExecution", ThisKey="ExecutionID", OtherKey="ExecutionID", IsUnique=true, IsForeignKey=false)]
		public TrainingExecution TrainingExecution
		{
			get
			{
				return this._TrainingExecution.Entity;
			}
			set
			{
				TrainingExecution previousValue = this._TrainingExecution.Entity;
				if (((previousValue != value) 
							|| (this._TrainingExecution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingExecution.Entity = null;
						previousValue.TrainingPlan = null;
					}
					this._TrainingExecution.Entity = value;
					if ((value != null))
					{
						value.TrainingPlan = this;
					}
					this.SendPropertyChanged("TrainingExecution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonTime_TrainingPlan", Storage="_LessonTime", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public LessonTime LessonTime
		{
			get
			{
				return this._LessonTime.Entity;
			}
			set
			{
				LessonTime previousValue = this._LessonTime.Entity;
				if (((previousValue != value) 
							|| (this._LessonTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonTime.Entity = null;
						previousValue.TrainingPlan.Remove(this);
					}
					this._LessonTime.Entity = value;
					if ((value != null))
					{
						value.TrainingPlan.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(int);
					}
					this.SendPropertyChanged("LessonTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_TrainingPlan", Storage="_LevelExpression", ThisKey="PlanStatus", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.TrainingPlan.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.TrainingPlan.Add(this);
						this._PlanStatus = value.LevelID;
					}
					else
					{
						this._PlanStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
